*** Settings ***

*** Keywords ***
tel
    [Arguments]    ${command}    @{rest}
    [Documentation]    telnet配置命令行 并返回回显.回显中如果有Error提示，返回执行失败。
    ${rtn}    Execute Command Ex    ${command}    @{rest}
    ${Error}    evaluate    '''${rtn}'''.find('Error')
    run keyword if    ${Error} != -1    FAIL    命令行执行失败！！
    [Return]    ${rtn}

logout_by_https
    Select Frame    id=logoFrame
    sleep    3
    Click Element    id=logoutLink

login_by_https
    [Arguments]    ${ip}    ${username}    ${password}    ${webbrowser}
    Open Browser    https://${ip}/auth.html    ${webbrowser}
    sleep    5
    Select Frame    id=authFrm
    Clear Element Text    id=userName
    Input Text    id=userName    admin
    Clear Element Text    name=pwd
    Input Password    name=pwd    password
    ${value}    Get Value    name=pwd
    Click Button    name=Submit
    sleep    10
    ${result}    ${returnvalue}    Run Keyword And Ignore Error    Page Should Contain    This appliance is not registered
    run keyword if    '${result}' == 'PASS'    Click Element    id=regLaterButt
    sleep    5
    ${result}    ${returnvalue}    Run Keyword And Ignore Error    Page Should Contain    OK to preempt existing administrator?
    run keyword if    '${result}' == 'PASS'    Click Button    name=Continue
    sleep    1
    ${result}    ${returnvalue}    Run Keyword And Ignore Error    Handle Alert    action=ACCEPT
    sleep    15
    Unselect Frame
    Comment    ${curr_title}    get window titles
    Comment    ${title}    Get From List    ${curr_title}    0
    Comment    Select Window    title=${title}
    Comment    ${result}    ${returnvalue}    Run Keyword And Ignore Error    Page Should Contain    Click here to log back in
    Comment    run keyword if    '${result}' == 'PASS'    run keywords    Click Element    xpath=//*[@href="auth.html"]
    ...    AND    log    Need TWO LOGIN
    ...    AND    twoLogin
    Comment    ${a}    Run Keyword And Return Status    Page Should Contain element    id=authFrm
    Comment    log    ${a}
    Comment    Run keyword if    '${a}'=='False'    run keywords    log    one login
    ...    AND    sleep    5
    ...    ELSE    run keywords    log    Need TWO LOGIN
    ...    AND    twoLogin

Regist_FW_by_https
    [Arguments]    ${email}    ${pwd}
    Unselect Frame
    Select Frame    id=logoFrame
    Click Link    //*[@id='registerLink']
    Unselect Frame
    sleep    20
    ${result}    ${returnvalue}    Run Keyword And Ignore Error    Page Should Contain    MySonicWall username/email
    : FOR    ${i}    IN RANGE    6
    \    run keyword if    '${result}' == 'FAIL'    click registerLink
    \    sleep    20
    \    EXIT for loop if    '${result}' == 'PASS'
    \    ${result}    ${returnvalue}    Run Keyword And Ignore Error    Page Should Contain    MySonicWall username/email
    Select Frame    id=tabFrame
    Input Text    name=login    ${email}
    sleep    3
    Input Text    name=pwd    ${pwd}
    sleep    3
    Click Element    name=Submit
    sleep    30
    Capture Page Screenshot
    Comment    Page Should Contain    Registration completed successfully

restart_by_https
    Select Frame    id=outlookFrame
    Click Element    id=j1_14_anchor
    sleep    5
    Click Element    id=j1_26_anchor
    sleep    5
    Unselect Frame
    Select Frame    id=tabFrame
    Click Button    Xpath=//input[@class='snwl-btn']
    Handle Alert    action=ACCEPT
    sleep    5
    Page Should Contain    Please wait, the appliance is restarting

Register_VirtualFW_by_https
    [Arguments]    ${email}    ${pwd}    ${sn}    ${code1}    ${code2}
    Unselect Frame
    Select Frame    id=logoFrame
    Click Link    //*[@id='registerLink']
    Unselect Frame
    sleep    10
    ${result}    ${returnvalue}    Run Keyword And Ignore Error    Page Should Contain    MySonicWall username/email
    : FOR    ${i}    IN RANGE    6
    \    run keyword if    '${result}' == 'FAIL'    click registerLink
    \    sleep    20
    \    EXIT for loop if    '${result}' == 'PASS'
    \    ${result}    ${returnvalue}    Run Keyword And Ignore Error    Page Should Contain    MySonicWall username/email
    Select Frame    id=tabFrame
    Input Text    name=login    ${email}
    sleep    3
    Input Text    name=pwd    ${pwd}
    sleep    3
    Click Element    name=Submit
    sleep    25
    Page Should Contain    Serial Number
    Unselect Frame
    sleep    1
    Select Frame    id=tabFrame
    Input Text    name=serialNumber    ${sn}
    sleep    3
    Input Text    name=authcode1    ${code1}
    sleep    3
    Input Text    name=authcode2    ${code2}
    sleep    3
    Input Text    name=fname    capacity
    sleep    3
    Click Element    Xpath=//input[@class='snwl-btn snwl-btn-primary']
    sleep    2
    Capture Page Screenshot
    Comment    Handle Alert    action=ACCEPT
    sleep    300

Enbale X0 SSH_Unregister
    login_by_https    192.168.168.168    admin    password    firefox
    Select Frame    id=outlookFrame
    sleep    10
    Click Element    Xpath=//*[@href='netInterfaces.html']
    sleep    5
    Unselect Frame
    Select Frame    id=tabFrame
    Click Element    Xpath=//*[@href='editInterface_0.html']/img[@class='actionIcon']
    sleep    5
    Get Window Titles
    Select Window    Edit Interface - X0
    Select Checkbox    name=lan_iface_ssh_mgmt
    sleep    5
    Click Element    Xpath=//input[@class='snwl-btn snwl-btn-primary']
    sleep    5

Enbale X0 SSH_registered
    Select Frame    id=outlookFrame
    sleep    5
    Click Element    id=j1_28_anchor
    sleep    5
    Click Element    id=j1_29_anchor
    sleep    5
    Unselect Frame
    Select Frame    id=tabFrame
    Click Element    Xpath=//*[@href='editInterface_0.html']/img[@class='actionIcon']
    sleep    5
    Get Window Titles
    Select Window    Edit Interface - X0
    get text    name=lan_iface_ssh_mgmt
    sleep    5
    Select Checkbox    name=lan_iface_ssh_mgmt
    sleep    5
    Click Element    Xpath=//input[@class='snwl-btn snwl-btn-primary']
    sleep    5

Enbale X0 SSH_https
    Comment    select Frame    id=outlookFrame
    Comment    click element    Xpath=//*[@href='systemStatusView.html']
    Comment    Unselect Frame
    select Frame    id=tabFrame
    ${result}    ${returnvalue}    Run Keyword And Ignore Error    select Frame    id=servicesFrame
    Comment    ${result}    ${returnvalue}    Run Keyword And Ignore Error    Current Frame Contains    Your SonicWall is not registered.
    Unselect Frame
    run keyword if    '${result}' == 'PASS'    Enbale X0 SSH_Unregister
    ...    ELSE    Enbale X0 SSH_registered

SSH-login-firewall
    [Arguments]    ${ip}    ${port}=22
    [Documentation]    通过串口服务器登陆盒子串口，进入配置模式config(18B1698A2100)#
    SSHLibrary.Open Connection    ${ip}    port= ${port}    timeout=10
    SSHLibrary.Login    admin    password    delay=5
    SSHLibrary.Write    configure terminal
    sleep    3
    ${rtn}=    SSHLibrary.read
    ${a}=    check_if_contain    ${rtn}    [no]:
    Run keyword if    ${a} == 1    SSHLibrary.Write    yes
    sleep    1

SSH-config_wan_ip
    [Arguments]    ${port}    ${ip}    ${mask}    ${gateway}
    [Documentation]    配置wan侧的ip地址，网关，使盒子可以网页访问
    ssh_enter_command    interface ${port}
    ssh_enter_command    ip-assignment WAN static
    ssh_enter_command    ip ${ip} netmask ${mask}
    ssh_enter_command    gateway ${gateway}
    ssh_enter_command    dns primary 10.190.202.200
    ssh_enter_command    commit
    ssh_enter_command    exit
    ssh_enter_command    management https
    ssh_enter_command    management ping
    ssh_enter_command    commit
    ssh_enter_command    exit

SSH-Factory-Restore
    [Arguments]    ${sleep_time}
    [Documentation]    恢复出厂配置
    SSHLibrary.Write    restore-defaults
    sleep    1
    SSHLibrary.Read Until    [cancel]:
    sleep    1
    SSHLibrary.Write    yes
    sleep    ${sleep_time}

SSH-config-Test-LAN
    [Arguments]    ${port}    ${ip}    ${mask}
    SSHLibrary.write    interface ${port}
    SSHLibrary.write    ip-assignment LAN static
    SSHLibrary.write    ip ${ip} netmask ${mask}
    SSHLibrary.write    commit
    sleep    40
    SSHLibrary.write    exit
    SSHLibrary.write    user-login http
    SSHLibrary.write    user-login https
    SSHLibrary.write    management ping
    SSHLibrary.write    management https
    SSHLibrary.write    commit
    sleep    40
    SSHLibrary.write    exit

SSH-config-Test-WAN
    [Arguments]    ${port}    ${ip}    ${mask}
    ssh_execute_command    interface ${port}
    ssh_execute_command    ip-assignment WAN static
    ssh_execute_command    ip ${ip} netmask ${mask}
    ssh_execute_command    commit
    ssh_execute_command    exit
    ssh_execute_command    management ping
    ssh_execute_command    commit
    ssh_execute_command    exit

click registerLink
    Unselect Frame
    Select Frame    id=logoFrame
    Click Link    //*[@id='registerLink']
    Unselect Frame

switch to classic mode
    Select Frame    name=toggleFrame
    Click Element    id=toggleViewBtn
    Unselect Frame

login firewall
    Telnet.Write    admin
    sleep    1
    Telnet.Read Until    Password:
    Telnet.Write    password
    sleep    1
    Telnet.Set Prompt    >
    Telnet.Read Until Prompt

login switch
    Write    admin
    sleep    1
    Read Until    Password:
    Write    password

get_native_vlan
    [Arguments]    ${result}    ${item}
    ${result1}    ${pvid}    Should Match Regexp    ${result}    ${item}
    [Return]    ${pvid}

change_native_vlan
    [Arguments]    ${port}    ${vlan1}    ${vlan2}
    tel    interface vlan ${vlan1}
    tel    no untag ${port}
    tel    exit
    tel    interface vlan ${vlan2}
    tel    untag ${port}
    tel    exit

config_trunkport_switchport
    [Arguments]    ${port}    ${vlan}
    tel    interface ${port}
    tel    no switchport
    tel    switchport
    tel    switchport trunk encapsulation dot1q
    tel    switchport mode trunk
    tel    switchport trunk allowed vlan ${vlan}
    tel    no shutdown
    tel    exit

config_native_vlan
    [Arguments]    ${port}    ${vlan}
    tel    interface vlan ${vlan}
    tel    untag ${port}
    tel    no shutdown
    tel    exit

config_accessport_switchport
    [Arguments]    ${port}    ${vlan}
    tel    interface ${port}
    tel    no switchport
    tel    switchport
    tel    switchport mode access
    tel    switchport access vlan ${vlan}
    tel    no shutdown
    tel    exit

exit_to_>
    : FOR    ${i}    INRANGE    9
    \    sleep    1
    \    Telnet.write    \r
    \    sleep    1
    \    ${rtn}    Telnet.read
    \    ${a1}=    check_if_contain    ${rtn}    >
    \    Run keyword if    ${a1} == 1    exit for loop
    \    ...    ELSE    Telnet.write    cancel

CLI-login-firewall
    [Arguments]    ${ip}    ${port}
    [Documentation]    通过串口服务器登陆盒子串口，进入配置模式config(18B1698A2100)#
    Telnet.Open Connection    ${ip}    port=${port}
    Telnet.Login    root    123456
    Telnet.write    \r
    sleep    5
    ${rtn}    Telnet.read
    ${error}=    check_if_contain    ${rtn}    ->
    Run keyword if    ${error} == 1    ->exit
    Telnet.write    \r
    ${rtn0}    Telnet.read
    ${b}=    check_if_contain    ${rtn0}    --more--
    Run keyword if    ${b} == 1    Telnet.Write Bare    q
    Telnet.write    \r
    ${rtn1}    Telnet.read
    ${a}=    check_if_contain    ${rtn1}    User:
    Run keyword if    ${a} == 1    login firewall
    ...    ELSE    exit_to_>
    Telnet.write    configure terminal
    sleep    3
    ${rtn}    Telnet.read
    ${a}=    check_if_contain    ${rtn}    [no]:
    Run keyword if    ${a} == 1    Telnet.write    yes
    ...    ELSE    sleep    1
    sleep    2
    Telnet.Set Prompt    \#
    Telnet.write    \r
    Telnet.Read Until Prompt

CLI-login-C4006
    [Arguments]    ${ip}    ${port}
    [Documentation]    通过串口服务器登陆盒子串口，进入配置模式config(18B1698A2100)#
    Telnet.Open Connection    ${ip}    port=${port}
    Telnet.Login    root    123456
    Telnet.write    \r
    ${rtn}    Telnet.read
    ${a}=    check_if_contain    ${rtn}    C4006>
    Run keyword if    ${a} == 1    Telnet.write    en
    sleep    1
    ${rtn}    Telnet.read
    log    ${rtn}
    ${b}    check_if_contain    ${rtn}    Password:
    Run keyword if    ${b} == 1    write    sonicwall
    sleep    2
    Comment    write    \r
    Comment    ${rtn}    read
    Comment    log    ${rtn}
    Comment    ${c}    check_if_contain    ${rtn}    (config)#
    Comment    Run keyword if    ${c} == 1    write    exit
    Comment    sleep    2
    write    \r
    ${rtn}    read
    ${d}    check_if_contain    ${rtn}    (config-if)#
    Run keyword if    ${d} == 1    write    exit
    sleep    1
    Telnet.write    end
    sleep    2
    Telnet.read
    Telnet.Set Prompt    \#
    Telnet.write    configure terminal
    Telnet.Read Until Prompt

Telnet-login-switch
    [Arguments]    ${ip}
    [Documentation]    通过串口服务器登陆盒子串口，进入配置模式config(18B1698A2100)#
    Telnet.Open Connection    ${ip}    port=23
    Telnet.Login    admin    password    login_prompt=Login:
    sleep    3
    Telnet.Set Prompt    \#
    Telnet.write    configure terminal
    Telnet.Read Until Prompt

CLI-config_wan_ip
    [Arguments]    ${port}    ${ip}    ${mask}    ${gateway}
    [Documentation]    配置wan侧的ip地址，网关，使盒子可以网页访问
    tel    interface ${port}
    tel    ip-assignment WAN static
    tel    ip ${ip} netmask ${mask}
    tel    gateway ${gateway}
    tel    dns primary 10.190.202.200
    tel    commit
    tel    exit
    tel    management https
    tel    management ping
    tel    commit
    tel    exit

CLI-Factory-Restore
    [Arguments]    ${sleep_time}
    [Documentation]    恢复出厂配置
    Telnet.Write    restore-defaults
    sleep    1
    Telnet.Set Prompt    [cancel]:
    sleep    1
    Telnet.Read Until Prompt
    Telnet.Write    yes
    sleep    ${sleep_time}

CLI-config-Test-LAN-X0
    [Arguments]    ${port}    ${ip}    ${mask}
    tel    interface ${port}
    tel    ip-assignment LAN static
    tel    ip ${ip} netmask ${mask}
    tel    commit
    ${rtn}    Telnet.read
    ${b}=    check_if_contain    ${rtn}    --more--|--MORE--
    Run keyword if    ${b} == 1    Telnet.Write Bare    q
    sleep    1
    tel    exit
    tel    management ping
    tel    user-login http
    tel    user-login https
    tel    commit
    ${rtn0}    Telnet.read
    ${a}=    check_if_contain    ${rtn0}    --more--|--MORE--
    Run keyword if    ${a} == 1    Telnet.Write Bare    q
    sleep    1
    tel    exit

CLI-config-Test-WAN
    [Arguments]    ${port}    ${ip}    ${mask}    ${gateway}
    tel    interface ${port}
    tel    ip-assignment WAN static
    tel    ip ${ip} netmask ${mask}
    tel    gateway ${gateway}
    tel    commit
    sleep    1
    tel    exit
    tel    management https
    tel    management ping
    tel    commit
    sleep    1
    tel    exit

CLI-WAN-to-LAN Allow
    tel    no access-rule from WAN to LAN action deny
    tel    commit
    tel    access-rule from WAN to LAN action allow
    tel    commit
    sleep    1
    Comment    write    \ \r
    Comment    sleep    1
    tel    exit

CLI-logout
    Telnet.write    exit
    sleep    1
    Telnet.write    exit
    sleep    1

choose group id
    [Arguments]    ${list}
    log to console    Group id is being used ,should change another one!!
    : FOR    ${index}    IN RANGE    1    13
    \    ${i}    evaluate    '${index}' in ${list}
    \    ${i}    evaluate    not ${i}
    \    Exit For Loop If    ${i}
    Set Suite Variable    ${group}    ${index}

run test case
    [Arguments]    ${run_id1}
    ${progress}=    Set Variable    0
    : FOR    ${index}    IN RANGE    100
    \    ${progress}    getRTS    ${run_id1}
    \    Exit For Loop If    ${progress} ==100
    \    Sleep    15
    Run Keyword IF    ${progress} ==100    Log To Console    Test Finished!
    ...    ELSE    FAIL    Execution timeout！！

BpFileModify_IMIX_2ports
    viewNormalTest    enableRequestPrints=true
    @{list}    set variable    1    2    3
    : FOR    ${len}    ${wei}    ${i}    IN ZIP    ${frameSize}    ${weight}
    ...    ${list}
    \    modifyNormalTest2    componentId=routingrobot_10G_1    elementId=sizeDist    paramId=mixlen${i}    Value=${len}
    \    modifyNormalTest2    componentId=routingrobot_10G_1    elementId=sizeDist    paramId=mixweight${i}    Value=${wei}
    \    sleep    1
    modifyNormalTest2    componentId=routingrobot_10G_1    elementId=duration    paramId=durationTime    Value=00:05:00
    Comment    modifyNormalTest2    componentId=routingrobot_10G_1    elementId=duration    paramId=durationFrames    Value=0

BpFileModify_IMIX_4ports
    viewNormalTest    enableRequestPrints=true
    @{list}    set variable    1    2    3
    : FOR    ${len}    ${wei}    ${i}    IN ZIP    ${frameSize}    ${weight}
    ...    ${list}
    \    modifyNormalTest2    componentId=routingrobot_10G_1    elementId=sizeDist    paramId=mixlen${i}    Value=${len}
    \    modifyNormalTest2    componentId=routingrobot_10G_1    elementId=sizeDist    paramId=mixweight${i}    Value=${wei}
    \    sleep    5
    \    modifyNormalTest2    componentId=routingrobot_1    elementId=sizeDist    paramId=mixlen${i}    Value=${len}
    \    modifyNormalTest2    componentId=routingrobot_1    elementId=sizeDist    paramId=mixweight${i}    Value=${wei}
    \    sleep    1
    modifyNormalTest2    componentId=routingrobot_10G_1    elementId=duration    paramId=durationTime    Value=00:05:00
    Comment    modifyNormalTest2    componentId=routingrobot_10G_1    elementId=duration    paramId=durationFrames    Value=0
    sleep    1
    modifyNormalTest2    componentId=routingrobot_1    elementId=duration    paramId=durationTime    Value=00:05:00
    Comment    modifyNormalTest2    componentId=routingrobot_1    elementId=duration    paramId=durationFrames    Value=0
    sleep    1

download firewall version and reboot with factory-default
    [Arguments]    ${username}    ${password}    ${ip}    ${file}    ${time}
    Telnet.write    import firmware ftp ftp://${username}:${password}@${ip}/${file}
    sleep    20
    ${result}    ${returnvalue}    Run Keyword And Ignore Error    Telnet.read until    uploaded successfully
    : FOR    ${i}    IN RANGE    10
    \    run keyword if    '${result}' == 'FAIL'    sleep    20
    \    EXIT for loop if    '${result}' == 'PASS'
    \    ${result}    ${returnvalue}    Run Keyword And Ignore Error    Telnet.read until    uploaded successfully
    run keyword if    '${result}' == 'FAIL'    FAIL    download version fail ,timeout!!
    Telnet.Write    boot uploaded factory-default
    sleep    1
    Telnet.Set Prompt    [cancel]:
    sleep    1
    Telnet.Read Until Prompt
    Telnet.Write    yes
    sleep    ${time}

boot current factory-default
    [Arguments]    ${time}
    Telnet.Write    boot current factory-default
    sleep    1
    Telnet.Set Prompt    [cancel]:
    sleep    1
    Telnet.Read Until Prompt
    Telnet.Write    yes
    sleep    ${time}
    log to console    same version ,no need download !

BP_ReservePorts
    [Arguments]    ${slot}    ${group}    @{ports}
    : FOR    ${index}    IN    @{ports}
    \    @{list}    create list    ${index}
    \    ReservePorts    slot=${slot}    portList=@{list}    group=${group}    force=true
    \    sleep    10

config_failover-lb_interface
    [Arguments]    ${interface}
    tel    failover-lb
    tel    group " Default LB Group"
    tel    interface ${interface}
    tel    rank 1
    tel    commit
    tel    exit
    tel    no interface X1
    tel    commit
    sleep    3
    tel    exit
    tel    end

CLI-MAX-DPI-Connections
    [Arguments]    ${time}
    [Documentation]    Switch to Max DPI Connections from Console
    tel    firewall
    tel    connections optimized
    Write    commit
    Set Prompt    [cancel]:
    ${result}    ${returnvalue}    Run Keyword And Ignore Error    Read Until Prompt
    run keyword if    '${result}' == 'PASS'    write yes and sleep    ${time}

CLI-MAX-SPI-Connections
    [Arguments]    ${time}
    [Documentation]    Switch to Max DPI Connections from Console
    tel    firewall
    tel    connections highest
    Write    commit
    Set Prompt    [cancel]:
    ${result}    ${returnvalue}    Run Keyword And Ignore Error    Read Until Prompt
    run keyword if    '${result}' == 'PASS'    write yes and sleep    ${time}

write yes and sleep
    [Arguments]    ${time}
    Write    yes
    sleep    ${time}

CLI-security maximum
    tel    security-services
    tel    security maximum
    tel    commit
    tel    exit

CLI-Performance Optimized
    tel    security-services
    tel    security performance-optimized
    tel    commit
    tel    exit

CLI-Enable-IPS
    tel    intrusion-prevention
    tel    enable
    tel    signature-group high-priority detect-all
    tel    signature-group high-priority prevent-all
    tel    signature-group medium-priority detect-all
    tel    signature-group medium-priority prevent-all
    tel    signature-group low-priority detect-all
    tel    commit
    tel    exit

CLI-Disable-IPS
    tel    intrusion-prevention
    tel    no enable
    tel    no signature-group high-priority detect-all
    tel    no signature-group high-priority prevent-all
    tel    no signature-group medium-priority detect-all
    tel    no signature-group medium-priority prevent-all
    tel    no signature-group low-priority detect-all
    tel    commit
    tel    exit

CLI-Enable-GAV
    tel    gateway-antivirus
    tel    enable
    tel    commit
    tel    exit

CLI-Disable-GAV
    tel    gateway-antivirus
    tel    no enable
    tel    commit
    tel    exit

CLI-Enable-AntiSpyware
    tel    anti-spyware
    tel    enable
    tel    signature-group high-danger detect-all
    tel    signature-group high-danger prevent-all
    tel    signature-group medium-danger detect-all
    tel    signature-group medium-danger prevent-all
    tel    signature-group low-danger detect-all
    tel    commit
    tel    exit

CLI-Disable-AntiSpyware
    tel    anti-spyware
    tel    no enable
    tel    no signature-group high-danger detect-all
    tel    no signature-group high-danger prevent-all
    tel    no signature-group medium-danger detect-all
    tel    no signature-group medium-danger prevent-all
    tel    no signature-group low-danger detect-all
    tel    commit
    tel    exit

Get bp-to-switchportslist
    [Arguments]    ${slot}    ${port}    @{excel}
    : FOR    ${i}    IN    @{excel}
    \    ${bpslot}    evaluate    int(${i["SLOT"]})
    \    ${bpport}    evaluate    int(${i["PORT"]})
    \    ${ports}    set variable if    ${bpslot} == ${slot} and ${bpport} == ${port}    ${i["SWITCH_PORT"]}
    \    exit for loop if    ${bpslot} == ${slot} and ${bpport} == ${port}
    [Return]    ${ports}

config S60
    [Arguments]    ${type}
    ###telnet登陆S60###
    @{data}=    read xls file    topology.xlsx    ${type}
    Telnet-login-switch    ${data[0]["S60_IP"]}
    ###配置 S60 PortS###
    log to console    config S60 ports!
    : FOR    ${i}    IN    @{data}
    \    config_trunkport_switchport    ${i["UNTAG"]}
    \    ${vlan}    evaluate    int(${i["VLAN"]})
    \    Comment    write    no interface vlan ${vlan}
    \    sleep    2
    \    Comment    Read Until Prompt
    \    ${result}    tel    do show interfaces switchport ${i["UNTAG"]}
    \    ${nativlan_id}    get_native_vlan    ${result}    U\\s+(\\d+)
    \    run keyword if    ${nativlan_id} == ${vlan}    log    the port has already configed
    \    ...    ELSE IF    ${nativlan_id} == 1    config_native_vlan    ${i["UNTAG"]}    ${vlan}
    \    ...    ELSE    change_native_vlan    ${i["UNTAG"]}    ${nativlan_id}    ${vlan}
    \    config_accessport_switchport    Te 0/48    ${vlan}
    log to console    finish config S60 switch!

config S3148
    [Arguments]    ${type}
    ###串口登陆3148###
    @{data}=    read xls file    topology.xlsx    ${type}
    ${consoleserver_port}    evaluate    ${data[0]["3148-CONSOLEPORT"]}
    CLI-login-C4006    ${data[0]["3148-CONSOLE_SERVER"]}    ${consoleserver_port}
    ###配置 3148 PortS###
    log to console    config 3148 ports!
    : FOR    ${i}    IN    @{data}
    \    config_trunkport_switchport    ${i["UNTAG"]}
    \    ${vlan}    evaluate    int(${i["VLAN"]})
    \    Comment    write    no interface vlan ${vlan}
    \    sleep    1
    \    Comment    Read Until Prompt
    \    ${result}    tel    do show interfaces switchport ${i["UNTAG"]}
    \    ${nativlan_id}    get_native_vlan    ${result}    U\\s+(\\d+)
    \    run keyword if    ${nativlan_id} == ${vlan}    log    the port has already configed
    \    ...    ELSE IF    ${nativlan_id} == 1    config_native_vlan    ${i["UNTAG"]}    ${vlan}
    \    ...    ELSE    change_native_vlan    ${i["UNTAG"]}    ${nativlan_id}    ${vlan}
    \    config_accessport_switchport    Te 1/49    ${vlan}
    log to console    finish config 3148 switch!

config S6000
    [Arguments]    ${type}
    ###telnet登陆S6000####
    @{data}=    read xls file    topology.xlsx    ${type}
    Telnet-login-switch    ${data[0]["S6000_IP"]}
    @{Uplink}    Set Variable    Te 0/98    Te 0/120
    : FOR    ${i}    ${j}    IN ZIP    ${data}    ${Uplink}
    \    ${vlan}    evaluate    int(${i["VLAN"]})
    \    config_trunkport_switchport    ${j}
    \    config_accessport_switchport    ${j}    ${vlan}
    log to console    finish config S6000 switch !

->exit
    Telnet.write    exit
    Telnet.write    \r

enable_TLS
    [Arguments]    ${ip}    ${username}    ${password}    ${webbrowser}
    Comment    login_by_https_TLS    ${ip}    admin    password    firefox
    login_by_https_ex_TLS    ${ip}    admin    password    firefox
    Comment    login_by_https_ex_TLS    10.7.3.55    admin    password    firefox
    ${ww}=    get cookies
    log    ${ww}
    log to console    ${ww}
    Comment    add cookie    cookie    SessId    B37A871CC9B3954F854CF46A718AF942
    goto    https://${ip}/diag.html
    Unselect Frame
    sleep    5
    Select Frame    id=outlookFrame
    Click Button    xpath = /html/body/table/tbody/tr[1]/td//input
    sleep    5
    Unselect Frame
    Select Frame    id=tabFrame
    Execute Javascript    document.getElementById('enTLSCompat').click()
    Capture Page Screenshot
    sleep    1
    click element    id=applyButt
    sleep    2
    log to console    Finished enabled TLS!
    sleep    5
    SSHLibrary.Open Connection    192.168.168.168    port= 22    timeout=10
    SSHLibrary.Login    admin    password    delay=5
    SSHLibrary.write    restart
    sleep    5
    ${rtn}=    SSHLibrary.read
    ${a}=    check_if_contain    ${rtn}    [cancel]:
    Run keyword if    ${a} == 1    SSHLibrary.Write    yes
    sleep    1
    close browser

ssh_login_capBed
    [Arguments]    ${ip}    ${port}=22
    SSHLibrary.Open Connection    ${ip}    port= ${port}    timeout=20
    SSHLibrary.Login    root    password    delay=10
    SSHLibrary.Write    cd /root/capacityTB/scripts/
    sleep    1

address_object
    [Arguments]    ${type}
    @{data}=    read xls file    topology.xlsx    ${type}
    ${console_ip}    set variable    ${data[0]["HOST_IP"]}
    ${max}    evaluate    2500
    ssh_login_capBed    10.7.3.253
    Set Client Configuration    prompt=#
    SSHLibrary.Write    cd /root/capacityTB/scripts
    log many    Run script
    SSHLibrary.Write    perl /root/capacityTB/bin/capacityInit.pl -fw ${console_ip} -o address-o -n $max
    Sleep    60
    SSHLibrary.Close Connection

Config_C4006
    [Arguments]    ${type}
    ###telnet登陆C4006####
    @{data}=    read xls file    topology.xlsx    ${type}
    ${C4006_PORT}    evaluate    ${data[0]["C4006_TELNETPORT"]}
    CLI-login-C4006    ${data[0]["C4006_IP"]}    ${C4006_PORT}
    ###配置 C4006 PortS###
    log to console    config C4006 ports!
    Comment    ${Uplink}    Set Variable    Fa 5/47
    : FOR    ${i}    IN    ${data}
    \    ${vlan}    evaluate    int(${i["VLAN"]})
    \    ${port}    evaluate    ${i["UNTAG"]}
    \    config_accessport_switchport    ${port}    ${vlan}
    log to console    finish config C4006 switch !

Export_Conf
    [Arguments]    ${username}    ${password}    ${ip}    ${path}    ${file}    ${type}
    SSH-login-firewall    192.168.168.168
    Set Client Configuration    prompt=#
    SSHLibrary.Write    export current-config exp ftp ftp://${username}:${password}@${ip}/${path}/${file}
    sleep    20
    ${result}    ${returnvalue}    Run Keyword And Ignore Error    SSHLibrary.Read Until    Upload complete
    : FOR    ${i}    IN RANGE    10
    \    run keyword if    '${result}' == 'FAIL'    sleep    20
    \    EXIT for loop if    '${result}' == 'PASS'
    \    ${result}    ${returnvalue}    Run Keyword And Ignore Error    SSHLibrary.Read Until    Upload complete
    run keyword if    '${result}' == 'FAIL'    FAIL    Export config fail ,timeout!!
    sleep    1

login_by_https_ex_TLS
    [Arguments]    ${ip}    ${username}    ${password}    ${webbrowser}
    Open Browser    https://${ip}/auth.html    ${webbrowser}
    sleep    5
    Select Frame    id=authFrm
    Clear Element Text    id=userName
    Input Text    id=userName    admin
    Clear Element Text    name=pwd
    Input Password    name=pwd    password
    ${value}    Get Value    name=pwd
    Click Button    name=Submit
    sleep    10
    ${result}    ${returnvalue}    Run Keyword And Ignore Error    Page Should Contain    This appliance is not registered
    run keyword if    '${result}' == 'PASS'    Click Element    id=regLaterButt
    sleep    5
    ${result}    ${returnvalue}    Run Keyword And Ignore Error    Page Should Contain    OK to preempt existing administrator?
    run keyword if    '${result}' == 'PASS'    Click Button    name=Continue
    sleep    1
    ${result}    ${returnvalue}    Run Keyword And Ignore Error    Handle Alert    action=ACCEPT
    sleep    10
    Unselect Frame
    ${curr_title}    get window titles
    ${title}    Get From List    ${curr_title}    0
    Select Window    title=${title}
    ${a}    Run Keyword And Return Status    Page Should Contain element    id=authFrm
    log    ${a}
    Run keyword if    '${a}'=='False'    run keywords    log    one login
    ...    AND    Select Frame    name=toggleFrame
    ...    ELSE    run keywords    log    Need TWO LOGIN
    ...    AND    twoLogin

ssh_execute_command
    [Arguments]    ${command}    ${time}    ${type}    ${case_name}
    SSHLibrary.read
    log to console    Start to run script!
    SSHLibrary.write    ${command}
    sleep    ${time}
    Comment    SSHLibrary.Read Until Prompt
    Comment    read_console_log    ${type}    ${time}
    Comment    get pre login banner    10.7.3.253
    Comment    ${rtn}    SSHLibrary.read
    Comment    ${More}=    check_if_contain    ${rtn}    VAR
    Comment    run keyword if    ${More}== 1    log    Finished running !
    ...    ELSE    log    Running failed!
    SSHLibrary.close connection

GetTSR
    [Arguments]    ${type}
    ### 创建TSR表格###
    ${path}    evaluate    '${type}'+'-Cap'+'-'+'${version}'
    ${folder}    evaluate    '${location}'+'/'+'${path}'
    ${csv_name}    set Variable    ${type}_${version}_TSR
    Create TSR file    ${folder}    ${csv_name}.csv
    ###获取TSR product数据###
    SSH-login-firewall    192.168.168.168
    Set Client Configuration    prompt=#
    SSHLibrary.Write    show tech-support-report product
    sleep    20
    ${tsr}    SSHLibrary.Read
    Comment    ${tsr}    Execute Command showALL    show tech-support-report product
    log    ${tsr}
    ${max_localUser}    get tsr value    ${tsr}    Max Local Users:\\s+(\\d+)
    ${max_sslVPN}    get tsr value    ${tsr}    max SSLVPN connections:\\s+(\\d+)
    ${max_userGrp}    get tsr value    ${tsr}    Max User Groups:\\s+(\\d+)
    ${max_userLogin}    get tsr value    ${tsr}    Max User Logins:\\s+(\\d+)
    ${max_restAPI_userLogin}    get tsr value    ${tsr}    Max Single Sign On Users:\\s+(\\d+)
    ${max_restAPI_Agents}    get tsr value    ${tsr}    Max SSO RADIUS Accounting clients:\\s+(\\d+)
    ${max_accessRules}    get tsr value    ${tsr}    Max Rules Per Table:\\s+(\\d+)
    ${max_addressobjPerGrp}    get tsr value    ${tsr}    Max Address Objects Per Group:\\s+(\\d+)
    ${max_serviceobjPerGrp}    get tsr value    ${tsr}    Max Service Objects Per Group:\\s+(\\d+)
    ${max_scheduleObj}    get tsr value    ${tsr}    Max Total User Schedule Objects:\\s+(\\d+)
    ${max_zones}    get tsr value    ${tsr}    Max Total Zone Objects:\\s+(\\d+)
    ${max_natPolicy}    get tsr value    ${tsr}    Max NAT Policies:\\s+(\\d+)
    ${max_vlan}    get tsr value    ${tsr}    Max virtual interfaces:\\s+(\\d+)
    ${max_routes}    get tsr value    ${tsr}    Max Static Routes:\\s+(\\d+)
    ${max_phase1}    get tsr value    ${tsr}    Max Phase1 SAs:\\s+(\\d+)
    ${max_phase2}    get tsr value    ${tsr}    Max Phase2 SAs:\\s+(\\d+)
    ${max_guestUser}    get tsr value    ${tsr}    Max Guest Users:\\s+(\\d+)
    ${max_app_p}    get tsr value    ${tsr}    Max App Firewall policies:\\s+(\\d+)
    ${max_app_o}    get tsr value    ${tsr}    Max App Firewall Application objs:\\s+(\\d+)
    ${max_app_a}    get tsr value    ${tsr}    Max App Firewall actions:\\s+(\\d+)
    ${max_app_e}    get tsr value    ${tsr}    Max App Firewall Email User objs:\\s+(\\d+)
    ${max_vpn_tunnel}    get tsr value    ${tsr}    max VPN tunnel interfaces allowed:\\s+(\\d+)
    ${max_vlan}    get tsr value    ${tsr}    Max virtual interfaces:\\s+(\\d+)
    ${max_dhcp}    get tsr value    ${tsr}    DHCPS Leases:\\s+(\\d+)
    Comment    ${max_dpiSSH}    get tsr value    ${tsr}    max DPI-SSH Connections:\\s+(\\d+)
    ${max_sp}    get tsr value    ${tsr}    maxSonicPointsPerInterface:\\s+(\\d+)
    Telnet.write    \r
    ###获取AO TSR###
    Telnet.write    show tech-support-report address-objects
    sleep    2
    ${tsr_a}    Telnet.read
    ${max_ao}    get tsr value    ${tsr_a}    Max objects:\\s+(\\d+)
    ${max_ag}    get tsr value    ${tsr_a}    Max groups:\\s+(\\d+)
    ${max_agd}    get tsr value    ${tsr_a}    Max group depth:\\s+(\\d+)
    Telnet.Write Bare    q
    Telnet.write    \r
    sleep    2
    ###获取SO TSR###
    Telnet.write    show tech-support-report service-objects
    sleep    2
    ${tsr_s}    Telnet.read
    ${max_so}    get tsr value    ${tsr_s}    Max objects:\\s+(\\d+)
    ${max_sg}    get tsr value    ${tsr_s}    Max groups:\\s+(\\d+)
    ${max_sgd}    get tsr value    ${tsr_s}    Max group depth:\\s+(\\d+)
    Telnet.Write Bare    q
    Telnet.write    \r
    sleep    2
    ###固定值###
    ${max_arp}    set Variable    300
    ${max_botnetFilters}    set Variable    512
    ${max_geoIPFilters}    set Variable    512
    ${max_dynamic-ao}    set Variable    256
    ###S2S 和 Group VPN###
    ${max_s2s}    ${max_grpVpn}    get_site2site_and_groupVPN_target    ${type}
    ###将TSR获取的值写入CSV表格###
    write to csvFile    ${folder}    ${csv_name}    ${max_ao}    ${max_ag}    ${max_agd}    ${max_addressobjPerGrp}
    ...    ${max_so}    ${max_sg}    ${max_sgd}    ${max_serviceobjPerGrp}    ${max_natPolicy}    ${max_vlan}
    ...    ${max_zones}    ${max_localUser}    ${max_userGrp}    ${max_userLogin}    ${max_guestUser}    ${max_accessRules}
    ...    ${max_dhcp}    ${max_sp}    ${max_s2s}    ${max_grpVpn}    ${max_routes}    ${max_vpn_tunnel}
    ...    ${max_arp}    ${max_scheduleObj}    ${max_app_p}    ${max_app_o}    ${max_app_a}    ${max_app_e}
    ...    ${max_phase1}    ${max_phase2}    ${max_sslVPN}    ${max_botnetFilters}    ${max_geoIPFilters}    ${max_routes}
    ...    ${max_restAPI_Agents}    ${max_restAPI_userLogin}    ${max_dpiSSH}    ${max_dynamic-ao}
    csv to xlsx    ${folder}    ${csv_name}
    log to console    Get TSR successfully!

simple_test
    [Arguments]    ${ip}    ${port}=22
    SSHLibrary.Open Connection    ${ip}    port= ${port}    timeout=5
    SSHLibrary.Login    root    password    delay=5
    SSHLibrary.Write    cd /root/capacityTB/scripts/
    sleep    3
    Comment    ssh_execute_command    ./simple_test.sh    240
    Comment    sleep    2
    ssh_execute_command    ./simple_test_1.sh    300
    sleep    2
    ssh_execute_command    ./simple_test_2.sh    20000

get_tsr_value
    [Arguments]    ${result}    ${item}
    ${result1}    ${pvid}    Should Match Regexp    ${result}    ${item}
    [Return]    ${pvid}

compared_with_target
    [Arguments]    ${type}    ${case_name}    ${actual_value}
    ${path}    evaluate    '${type}'+'-Cap'+'-'+'${version}'
    ${folder}    evaluate    '${location}'+'/'+'${path}'
    ${csv_name}    set Variable    ${type}_${version}_TSR
    @{data}=    read tsr csvfile    ${folder}    ${csv_name}.csv
    ${target_value}    evaluate    int(${data[0]["${case_name}"]})
    log    ${target_value}
    run keyword if    ${target_value}==${actual_value}    log to console    ${case_name} passed! Actual value:${actual_value}=Target value:${target_value}!
    ...    ELSE IF    ${target_value}<${actual_value}    log to console    ${case_name} need to confirm!!Actual value:${actual_value}>Target value:${target_value}!
    ...    ELSE    log to console    ${case_name} failed!!Actual value:${actual_value} \ \ Target value:${target_value}

get_target_fromCSV
    [Arguments]    ${type}    ${case_name}
    ${path}    evaluate    '${type}'+'-Cap'+'-'+'${version}'
    ${folder}    evaluate    '${location}'+'/'+'${path}'
    ${csv_name}    set Variable    ${type}_${version}_TSR
    @{data}=    read tsr csvfile    ${folder}    ${csv_name}.csv
    ${target_value}    evaluate    int(${data[0]["${case_name}"]})
    [Return]    ${target_value}

get_defaultvalue_and_targetvalue
    [Arguments]    ${show_name}
    SSH-login-firewall    192.168.168.168
    sleep    1
    SSHLibrary.Write    show tech-support-report ${show_name}
    sleep    20
    ${tsr_o}    SSHLibrary.read
    ${current_value}    get tsr value    ${tsr_o}    Number of objects:\\s+(\\d+)
    ${max_value}    get tsr value    ${tsr_o}    Max objects:\\s+(\\d+)
    SSHLibrary.Write Bare    q
    SSHLibrary.write    \r
    SSHLibrary.Close Connection
    [Return]    ${current_value}    ${max_value}

get_userGrp_value
    login_sonicwall
    Unselect Frame
    Select Frame    id=outlookFrame
    Comment    Click element    css=[href="guestServiceSettings.html"]
    Click element    xpath=//*[@href="usersStatusView.html"]
    sleep    2
    Click element    xpath=//*[@href="userObjView.html"]
    sleep    10
    Unselect Frame
    Select Frame    id=tabFrame
    Comment    Click element    xpath=//ul[@id="tabs"]//span[contains(text(),Local Groups)]
    Click element    xpath=//ul/*[@id="groupFolder_trigger"]
    sleep    10
    Unselect Frame
    Select Frame    id=tabFrame
    wait until page contains    Local Groups
    ${returnvalue}    get element attribute    xpath=//*/span[3]/span    title
    log    ${returnvalue}
    ${current_userGrp1}    evaluate    '${returnvalue}'.split(' ')[0]
    ${current_userGrp}    trans_to_int    ${current_userGrp1}
    log    ${current_userGrp}
    Capture Page Screenshot
    Unselect Frame
    sleep    5
    close browser
    [Return]    ${current_userGrp}

deleteAll_userGrp
    [Arguments]    ${default_value}
    login_sonicwall
    Unselect Frame
    Select Frame    id=outlookFrame
    Comment    Click element    css=[href="guestServiceSettings.html"]
    Click element    xpath=//*[@href="usersStatusView.html"]
    sleep    2
    Click element    xpath=//*[@href="userObjView.html"]
    sleep    60
    Unselect Frame
    Select Frame    id=tabFrame
    Click element    xpath=//ul/*[@id="groupFolder_trigger"]
    Comment    sleep    2
    Comment    Unselect Frame
    Comment    Select Frame    id=tabFrame
    wait until page contains    Local Groups
    sleep    60
    Click element    xpath=//div[@id="groupFolder_tabheader"]//div[@class="actionMenuTrigger"]
    sleep    5
    ${delAll_status}    get element attribute    xpath=//ul[@class="swlDropdownMenu"]/li[3]    class
    run keyword if    "${delAll_status}" == "swlDropdownMenuItem swlDisabled"    log    "Delete all" is unavaliable!
    ...    ELSE    Run Keywords    Click element    xpath=//ul[@class="swlDropdownMenu"]/li[@title="Delete all groups"]
    ...    AND    confirm action
    sleep    160
    Capture Page Screenshot
    ${returnvalue}    get element attribute    xpath=//*/span[3]/span    title
    log    ${returnvalue}
    ${value_remain1}    evaluate    '${returnvalue}'.split(' ')[0]
    ${value_remain}    trans_to_int    ${value_remain1}
    run keyword if    ${value_remain}==${default_value}    log to console    Deleted all successfully! value_remain:${value_remain}==default_value:${default_value}
    ...    ELSE    log to console    Failed to delete all!value remain=${value_remain}
    Capture Page Screenshot
    Unselect Frame
    sleep    5
    close browser

login_sonicwall
    login_by_https    192.168.168.168    admin    password    firefox

turn_to_userGrp
    Select Frame    id=outlookFrame
    Click element    xpath=//*[@href="usersStatusView.html"]
    sleep    2
    Click element    xpath=//*[@href="userObjView.html"]
    sleep    2
    Unselect Frame
    Select Frame    id=tabFrame
    sleep    2
    Click element    xpath=//ul/*[@id="groupFolder_trigger"]
    sleep    2
    Unselect Frame
    Select Frame    id=tabFrame
    sleep    2
    wait until page contains    Local Groups
    Click element    xpath=//ul/*[@title="Delete all groups"]
    sleep    60
    close browser

compared_with_target_ex
    [Arguments]    ${type}    ${case_name}    ${actual_value}    ${default_value}
    ${path}    evaluate    '${type}'+'-Cap'+'-'+'${version}'
    ${folder}    evaluate    '${location}'+'/'+'${path}'
    ${csv_name}    set Variable    ${type}_${version}_TSR
    @{data}=    read tsr csvfile    ${folder}    ${csv_name}.csv
    ${target_value}    evaluate    int(${data[0]["${case_name}"]})
    ${max_value}    evaluate    ${target_value}+${default_value}
    log    ${target_value}
    run keyword if    ${max_value}==${actual_value}    log to console    Passed! Actual value:${actual_value}=max_value:${max_value}!
    ...    ELSE IF    ${max_value}<${actual_value}    log to console    Need to confirm!!Actual value:${actual_value}>max value:${max_value}!
    ...    ELSE    log to console    Failed!!Actual value:${actual_value} \ \ max:${max_value}

get_ip_port
    [Arguments]    ${type}
    ###获取盒子IP##
    @{data}=    read xls file    Virtual_topology.xlsx    topology
    ${host_ip}    set variable    ${data[0]["HOST_IP"]}
    ${consoleserver_ip}    set variable    192.168.168.168
    ${consoleserver_port}    set variable    22
    [Return]    ${host_ip}    ${consoleserver_ip}    ${consoleserver_port}

get_tsr_file
    [Arguments]    ${type}
    ${folder}    evaluate    '${type}'+'-Cap'+'-'+'${version}'
    ${path}    evaluate    '${location}'+'/'+'${folder}'
    ${csv_name}    set Variable    ${type}_${version}_TSR
    [Return]    ${path}    ${csv_name}

get_arpResult
    login_sonicwall
    Unselect Frame
    Select Frame    id=outlookFrame
    Comment    Click element    css=[href="guestServiceSettings.html"]
    Click element    xpath=//*[@href="netInterfaces.html"]
    sleep    2
    Click element    xpath=//*[@href="netArpView.html?startItem=0&sortCol=1&sortInverted=0"]
    sleep    10
    Unselect Frame
    Select Frame    id=tabFrame
    wait until page contains    Static ARP Entries
    sleep    60
    ${text}    Get Text    xpath=//table[@class="swlDataTablePlain"]
    ###判断是否加到了300个###
    log    ${text}
    ${value}=    check_if_contain    ${text}    300
    Run keyword if    ${value}== 1    log to console    Added to 300 successfully!
    ...    ELSE    log to console    Failed! no 300 arps matched!
    Capture Page Screenshot
    sleep    20
    Comment    Comment    Execute Javascript    document.getElementsByClassName('delAllStaticBtn').click()
    Comment    click element    //td[@class="footerAlignRight"]/input[@name="delAllStaticBtn"]
    Comment    Comment    click element    //*[@name="delAllStaticBtn"]
    Comment    sleep    60
    Comment    ${delAll_status}    get element attribute    xpath=//input[@value="Delete All"]    disabled
    Comment    run keyword if    "${delAll_status}" == ""    log    Deleted all!
    ...    ELSE    Failed to deleted all!
    Unselect Frame
    close browser

CLI-noItems
    [Arguments]    ${item}
    SSH-login-firewall    192.168.168.168
    sleep    1
    SSHLibrary.Write    ${item}
    sleep    5
    SSHLibrary.Read Until    \#
    SSHLibrary.Write    commit
    ${rtn}=    SSHLibrary.Read Until Regexp    changes made|Changes made|use by rule
    Set Client Configuration    prompt=#
    sleep    2
    SSHLibrary.write    ping 10.7.3.254
    sleep    2
    ${result}    ${returnvalue}    Run Keyword And Ignore Error    SSHLibrary.read until    is alive
    : FOR    ${i}    IN RANGE    10
    \    run keyword if    '${result}' == 'FAIL'    sleep    20
    \    EXIT for loop if    '${result}' == 'PASS'
    \    ${result}    ${returnvalue}    Run Keyword And Ignore Error    SSHLibrary.read until    is alive
    run keyword if    '${result}' == 'FAIL'    Log to console    Failed ping after no items! Can't ping gateway 10.7.3.254 successfully!
    ...    ELSE    log to console    Ping gateway successfully after no items!
    SSHLibrary.Close Connection

ssh_execute_commands
    [Arguments]    ${command}    ${time}
    SSHLibrary.read
    SSHLibrary.write    ${command}
    sleep    ${time}
    Comment    ${rtn}=    SSHLibrary.Read Until Regexp    ]#
    Comment    ${rtn}    SSHLibrary.read
    Comment    ${More}=    check_if_contain    ${rtn}    Log:
    Comment    run keyword if    ${More}== 1    log to console    Running successfully!
    ...    ELSE    log to console    Running failed!
    SSHLibrary.close connection

get_delete_application_values
    [Arguments]    ${type}
    login_sonicwall
    Unselect Frame
    Select Frame    id=outlookFrame
    Comment    Click element    css=[href="guestServiceSettings.html"]
    Click element    xpath=//*[@href="policyView.html"]
    sleep    2
    ###查看app-p的结果并删除###
    Click element    xpath=//*[@href="appFirewallView.html"]
    sleep    10
    Unselect Frame
    Select Frame    id=tabFrame
    ${app_p_total}    get element attribute    xpath=//*/span[3]/span    title
    ${actual_app-p}    evaluate    '${app_p_total}'.split(' ')[0]
    log to console    actual app policies=${actual_app-p}
    Capture Page Screenshot
    Comment    wait until page contains    Filter
    Comment    sleep    60
    click element    xpath=//div[@class="toolbarAction swlDelAction actionWithDropdown"]
    sleep    20
    Click element    xpath=//li[@title="Delete all app firewall policies"]
    confirm action
    sleep    60
    ${remain01}    get element attribute    xpath=//*/span[3]/span    title
    ${remain1}    evaluate    '${remain01}'.split(' ')[0]
    run keyword if    "${remain1}" == "0"    log to console    "Delete all" app policies successfully!
    ...    ELSE    Fail    Failed to "Delete all" app policies!
    Unselect Frame
    ###查看app-o的结果并删除###
    Select Frame    id=outlookFrame
    Click element    xpath=//*[@href="matchObjView.html"]
    sleep    20
    Unselect Frame
    Select Frame    id=tabFrame
    ${app_o_total}    get element attribute    xpath=//*/span[3]/span    title
    ${actual_app-o}    evaluate    '${app_o_total}'.split(' ')[0]
    log to console    actual app objects=${actual_app-o}
    Capture Page Screenshot
    click element    xpath=//div[@class="toolbarAction swlDelAction actionWithDropdown"]
    sleep    20
    Click element    xpath=//li[@title="Delete all match objects"]
    confirm action
    sleep    60
    ${remain02}    get element attribute    xpath=//*/span[3]/span    title
    ${remain2}    evaluate    '${remain02}'.split(' ')[0]
    run keyword if    "${remain2}" == "0"    log to console    "Delete all" app objects successfully!
    ...    ELSE    Fail    Failed to "Delete all" app objects!
    Unselect Frame
    ###查看app-a的结果并删除###
    Select Frame    id=outlookFrame
    Click element    xpath=//*[@href="actionObjView.html"]
    sleep    10
    Unselect Frame
    Select Frame    id=tabFrame
    ${app_a_total}    get element attribute    xpath=//*/span[3]/span    title
    ${actual_app-a}    evaluate    '${app_a_total}'.split(' ')[0]
    log to console    actual app action=${actual_app-a}
    Capture Page Screenshot
    click element    xpath=//div[@class="toolbarAction swlDelAction actionWithDropdown"]
    sleep    20
    Click element    xpath=//li[@title="Delete all custom action objects"]
    confirm action
    sleep    60
    ${remain03}    get element attribute    xpath=//*/span[3]/span    title
    ${remain3}    evaluate    '${remain03}'.split(' ')[0]
    log to console    Delete all! remain=${remain3}
    ${max_app-a}    get_target_fromCSV    ${type}    Application Firewall Actions
    run keyword if    ${remain3} < ${max_app-a}    log to console    "Delete all" app action successfully!
    ...    ELSE    log to console    Failed to "Delete all" app action!
    Capture Page Screenshot
    ###查看app-e的结果并删除###
    Unselect Frame
    Select Frame    id=outlookFrame
    Click element    xpath=//*[@href="emailObjView.html"]
    sleep    10
    Unselect Frame
    Select Frame    id=tabFrame
    ${app_e_total}    get element attribute    xpath=//*/span[3]/span    title
    ${actual_app-e}    evaluate    '${app_e_total}'.split(' ')[0]
    log to console    actual app email objects=${actual_app-e}
    Capture Page Screenshot
    click element    xpath=//div[@class="toolbarAction swlDelAction actionWithDropdown"]
    sleep    20
    Click element    xpath=//li[@title="Delete all E-mail Address Objects"]
    confirm action
    sleep    60
    ${remain04}    get element attribute    xpath=//*/span[3]/span    title
    ${remain4}    evaluate    '${remain04}'.split(' ')[0]
    run keyword if    "${remain4}" == "0"    log to console    "Delete all" email address objects successfully!
    ...    ELSE    Fail    Failed to "Delete all" email address objects!
    close browser
    [Return]    ${actual_app-p}    ${actual_app-o}    ${actual_app-a}    ${actual_app-e}

get_routes
    [Arguments]    ${type}
    login_sonicwall
    Unselect Frame
    Select Frame    id=outlookFrame
    Comment    Click element    css=[href="guestServiceSettings.html"]
    Comment    Click element    xpath=//*[@href="dynDashboardPolicyOverview.html"]
    Comment    sleep    2
    ###查看IPv4 route的结果并删除###
    Click element    xpath=//*[@href="dynDashboardPolicyOverview.html"]
    sleep    10
    Click element    xpath=//*[@href="ngpeRoutePoliciesView.html"]
    sleep    10
    Unselect Frame
    Select Frame    id=tabFrame
    Comment    Click element    //*[@id="pbrFolder_trigger"]
    ${route_total}    Get Text    xpath=//div[@class="item_count pull-left"]
    sleep    2
    Comment    ${actual_static-route}    get_tsr_value    ${route_total}    Displaying (\\d+) policies
    ${actual_static-route}    get_tsr_value    ${route_total}    Displaying (\\d+) rules
    log to console    actual static-route=${actual_static-route}
    Capture Page Screenshot
    Comment    wait until page contains    Filter
    Comment    sleep    60
    close browser
    Comment    ${route_ipv4_total}    get element attribute    xpath=//*/span[5]/span    title
    Comment    Capture Page Screenshot
    Comment    click element    xpath=//div[@class="toolbarAction swlDelAction actionWithDropdown"]
    Comment    sleep    20
    Comment    Click element    xpath=//li[@title="Delete all custom route policies"]
    Comment    sleep    3
    Comment    confirm action
    Comment    sleep    120
    Comment    Capture Page Screenshot    \    /html/body/div[1]/div/div/div/div/div[3]/div/div/div[3]
    Comment    ${remain0}    get element attribute    xpath=//*/span[5]/span    title
    Comment    ${remain}    evaluate    '${remain0}'.split(' ')[0]
    Comment    log to console    Delete all! IPv4 route remain=${remain}
    Comment    ${max_static-route}    get_target_fromCSV    ${type}    Static Routes
    Comment    ${rtn}    evaluate    ${max_static-route}-6
    Comment    run keyword if    ${remain} < ${rtn}    log to console    "Delete all" routes successfully!
    ...    ELSE    log to console    Failed to "Delete all" routes!
    Comment    ###查看IPv6的值###
    Comment    Click element    xpath=//div[@class="toolbarAction swlIpVersionAction actionWithDropdown"]
    Comment    sleep    2
    Comment    Click element    xpath=//li[@data-value="ipv6"]
    Comment    sleep    10
    Comment    ${route_ipv6_total}    get element attribute    xpath=//*/span[5]/span    title
    Comment    ${actual_route_ipv4}    evaluate    '${route_ipv4_total}'.split(' ')[0]
    Comment    ${actual_route_ipv4_int}    trans_to_int    ${actual_route_ipv4}
    Comment    Comment    ${actual_route_ipv4_int}    evaluate    '${actual_route_ipv4}'.replace(',','')
    Comment    ${actual_route_ipv6}    evaluate    '${route_ipv6_total}'.split(' ')[0]
    Comment    ${actual_static-route}    evaluate    ${actual_route_ipv4_int}+${actual_route_ipv6}
    [Return]    ${actual_static-route}

trans_to_int
    [Arguments]    ${text}
    ${value}=    check_if_contain    ${text}    ,
    ${actual_result1}    set variable    1
    ${actual_result}    run keyword if    ${value}==1    evaluate_for_if    ${actual_result1}    '${text}'.replace(',','')
    ...    ELSE    evaluate_for_if    ${actual_result1}    ${text}
    [Return]    ${actual_result}

get_delete_nat-policies
    [Arguments]    ${type}
    login_sonicwall
    Unselect Frame
    Select Frame    id=outlookFrame
    Comment    Click element    css=[href="guestServiceSettings.html"]
    Click element    xpath=//*[@href="dynDashboardPolicyOverview.html"]
    sleep    2
    ###查看nat policy的结果并删除###
    Click element    xpath=//*[@href="ngpeNatPoliciesView.html"]
    sleep    10
    Unselect Frame
    Select Frame    id=tabFrame
    Comment    Click element    //*[@id="pbrFolder_trigger"]
    Comment    sleep    10
    ${nat-pol_total}    get text    xpath=//div[@class="item_count pull-left"]
    ${actual_nat-pol}    get_tsr_value    ${nat-pol_total}    Displaying (\\d+) rules
    ${actual_nat-pol_int}    trans_to_int    ${actual_nat-pol}
    log to console    actual nat-pol=${actual_nat-pol}
    Capture Page Screenshot
    click element    id=policy-delete-all-button
    sleep    2
    click element    id=okButton
    Comment    confirm action
    sleep    1
    confirm action
    sleep    60
    ${nat-pol_remain_text}    get text    xpath=//div[@class="item_count pull-left"]
    ${remain}    get_tsr_value    ${nat-pol_remain_text}    Displaying (\\d+) rules
    run keyword if    ${remain} < 13    log to console    "Delete all" nat-pol successfully!
    ...    ELSE    log to console    Failed to "Delete all" nat-pol!
    Capture Page Screenshot
    Comment    wait until page contains    Filter
    Comment    sleep    60
    close browser
    [Return]    ${actual_nat-pol_int}

get_delete_botnet-filter
    [Arguments]    ${type}
    login_sonicwall
    Unselect Frame
    Select Frame    id=outlookFrame
    Comment    Click element    css=[href="guestServiceSettings.html"]
    Click element    xpath=//*[@href="ssSettingsView.html"]
    sleep    2
    ###查看nat policy的结果并删除###
    Click element    xpath=//*[@href="botnetFilter.html"]
    sleep    10
    Unselect Frame
    Select Frame    id=tabFrame
    Click element    //*[@id="usrBotnetFolder_trigger"]
    sleep    10
    ${botnet-filter_total}    get element attribute    xpath=//*/span[3]/span    title
    Capture Page Screenshot
    export log    ${type}    botnet-filter
    click element    xpath=//div[@class="toolbarAction swlDelAction actionWithDropdown"]
    sleep    20
    Click element    xpath=//li[@title="Delete all custom address objects"]
    confirm action
    sleep    60
    Capture Page Screenshot
    ${remain0}    get element attribute    xpath=//*/span[3]/span    title
    ${remain}    evaluate    '${remain0}'.split(' ')[0]
    log to console    Delete all! botnet filter remain=${remain}
    Comment    ${max_botnet-filter}    get_target_fromCSV    ${type}    Botnet Filters
    Comment    ${rtn}    set variable    ${max_botnet-filter}
    run keyword if    ${remain} ==0    log to console    "Delete all" botnet filter ssuccessfully!
    ...    ELSE    log to console    Failed to "Delete all" \ botnet filters!
    ${actual_botnet-filter}    evaluate    '${botnet-filter_total}'.split(' ')[0]
    Comment    ${actual_botnet-filter_int}    trans_to_int    ${actual_botnet-filter}
    log to console    actual botnet-filter=${actual_botnet-filter}
    Capture Page Screenshot
    close browser
    [Return]    ${actual_botnet-filter}

get_delete_geo-ip-filter
    [Arguments]    ${type}    ${case_name}
    login_sonicwall
    Unselect Frame
    Select Frame    id=outlookFrame
    Comment    Click element    css=[href="guestServiceSettings.html"]
    Click element    xpath=//*[@href="ssSettingsView.html"]
    sleep    2
    ###查看nat policy的结果并删除###
    Click element    xpath=//*[@href="geoIpFilter.html"]
    sleep    10
    Unselect Frame
    Select Frame    id=tabFrame
    Click element    //*[@id="geoIpUsrLocFolder_trigger"]
    sleep    10
    ${geo-filter_total}    get element attribute    xpath=//*/span[3]/span    title
    Capture Page Screenshot
    click element    xpath=//div[@class="toolbarAction swlDelAction actionWithDropdown"]
    sleep    20
    Click element    xpath=//li[@title="Delete all custom address objects"]
    confirm action
    ${time}    set variable    60
    Comment    read_console_log    ${type}    ${time}    ${case_name}
    Capture Page Screenshot
    ${remain0}    get element attribute    xpath=//*/span[3]/span    title
    ${remain}    evaluate    '${remain0}'.split(' ')[0]
    log to console    Delete all! geo ip filter remain=${remain}
    Comment    ${max_geo-ip-filter}    get_target_fromCSV    ${type}    GeoIP Filters
    Comment    ${rtn}    set variable    ${max_geo-ip-filter}
    run keyword if    ${remain} ==0    log to console    "Delete all" geo-ip-filter successfully!
    ...    ELSE    log to console    Failed to "Delete all" geo-ip-filter!
    ${actual_geo-ip-filter}    evaluate    '${geo-filter_total}'.split(' ')[0]
    Comment    ${actual_geo-ip-filter_int}    trans_to_int    ${actual_geo-ip-filter}
    log to console    actual geo-ip-filter=${actual_geo-ip-filter}
    Capture Page Screenshot
    close browser
    [Return]    ${actual_geo-ip-filter}

get_delete_guest-user
    [Arguments]    ${type}    ${max_guest-user}    ${run_time}    ${case_name}
    login_sonicwall
    Unselect Frame
    Select Frame    id=outlookFrame
    Comment    Click element    css=[href="guestServiceSettings.html"]
    Click element    xpath=//*[@href="usersStatusView.html"]
    sleep    2
    ###查看nat policy的结果并删除###
    Click element    xpath=//*[@href="guestUserObjView.html"]
    sleep    10
    Unselect Frame
    Select Frame    id=tabFrame
    ${num_loop}    evaluate    ${max_guest-user} /500
    :FOR    ${i}    IN RANGE    ${num_loop}
    \    Execute Javascript    window.scrollTo(0, document.body.scrollHeight)
    \    sleep    2
    \    Comment    Execute Javascript    document.getElementById('enTLSCompat').click()
    \    Click element    xpath=//*[@name="addGenBulkGuestBtn"]
    \    sleep    5
    \    ${titles}    Get Window Titles
    \    ${titles1}    Get From List    ${titles}    0
    \    ${titles2}    Get From List    ${titles}    1
    \    select Window    title=${titles2}
    \    input text    name=uoNumAccounts    500
    \    sleep    1
    \    click element    //input[@value="OK"]
    \    Capture Page Screenshot
    \    sleep    20
    \    select Window    title=${titles1}
    \    Comment    Select Frame    id=tabFrame
    sleep    2
    click element    xpath=//a[@name="lastPage"]
    sleep    10
    ${text}    Get Text    xpath=//table[@class="swlDataTablePlain"]
    log    ${text}
    ${max_guest-user1}    evaluate    str(${max_guest-user})
    ${value}=    check_if_contain    ${text}    ${max_guest-user1}
    Run keyword if    ${value}== 1    log to console    Added to ${max_guest-user} successfully!
    ...    ELSE    log to console    Failed! no ${max_guest-user} arps matched!
    close browser
    ##export conf
    export log    ${type}    ${case_name}
    ##delete all guest user
    login_sonicwall
    Unselect Frame
    Select Frame    id=outlookFrame
    Comment    Click element    css=[href="guestServiceSettings.html"]
    Click element    xpath=//*[@href="usersStatusView.html"]
    sleep    2
    ###查看nat policy的结果并删除###
    Click element    xpath=//*[@href="guestUserObjView.html"]
    sleep    10
    Unselect Frame
    Select Frame    id=tabFrame
    execute javascript    window.delAllVisibleGuests()
    sleep    2
    confirm action
    sleep    2
    run keyword if    ${max_guest-user}>5000    confirm action
    sleep    100
    ${text1}    Get Text    xpath=//table[@class="swlDataTablePlain"]
    log    ${text1}
    ${value1}=    check_if_contain    ${text1}    No Entries
    Run keyword if    ${value1}== 1    log to console    Deleted ${max_guest-user} successfully!
    ...    ELSE    log to console    Failed to delete ${max_guest-user}!
    Capture Page Screenshot
    close browser
    [Return]    ${value}

get_delete_local-user
    [Arguments]    ${type}
    login_sonicwall
    Unselect Frame
    Select Frame    id=outlookFrame
    Click element    xpath=//*[@href="usersStatusView.html"]
    sleep    2
    Click element    xpath=//*[@href="userObjView.html"]
    sleep    10
    Unselect Frame
    Select Frame    id=tabFrame
    Click element    //ul/*[@id="userFolder_trigger"]
    sleep    10
    ${local-user_total}    get element attribute    xpath=//*/span[3]/span    title
    Capture Page Screenshot
    click element    xpath=//div[@class="toolbarAction swlDelAction actionWithDropdown"]
    sleep    20
    Click element    xpath=//li[@title="Delete all users"]
    confirm action
    sleep    60
    Capture Page Screenshot
    ${remain0}    get element attribute    xpath=//*/span[3]/span    title
    ${remain}    evaluate    '${remain0}'.split(' ')[0]
    log to console    Delete all! local user remain=${remain}
    run keyword if    ${remain} ==0    log to console    "Delete all" local user ssuccessfully!
    ...    ELSE    log to console    Failed to "Delete all" \ local user!
    ${actual_local-user}    evaluate    '${local-user_total}'.split(' ')[0]
    ${actual_local-user_int}    trans_to_int    ${actual_local-user}
    log to console    actual local user=${actual_local-user_int}
    Capture Page Screenshot
    close browser
    [Return]    ${actual_local-user_int}

get_site2site_and_groupVPN_target
    login_sonicwall
    Comment    Unselect Frame
    Unselect Frame
    Select Frame    id=outlookFrame
    Click element    xpath=//*[@href="vpnSettingsView.html"]
    sleep    10
    Unselect Frame
    Select Frame    id=tabFrame
    sleep    5
    ${text_s2sVPN}    Get Text    xpath=//div[@id="divVpnPolicies_tblSummary"]/div[1]/span
    ${text_groupVPN}    Get Text    xpath=//div[@id="divVpnPolicies_tblSummary"]/div[2]/span
    ${max_s2sVPN}    get_tsr_value    ${text_s2sVPN}    Site To Site Policies: \\d+ Policies Defined, \\d+ Policies Enabled, (\\d+) Maximum Policies Allowed
    ${max_groupVPN}    get_tsr_value    ${text_groupVPN}    GroupVPN Policies: \\d+ Policies Defined, \\d+ Policies Enabled, (\\d+) Maximum Policies Allowed
    Capture Page Screenshot
    Comment    close browser
    [Teardown]    close browser
    [Return]    ${max_s2sVPN}    ${max_groupVPN}

get_delete_S2Svpn
    [Arguments]    ${type}    ${case_name}
    ###获取盒子相关数据##
    login_sonicwall
    Unselect Frame
    Select Frame    id=outlookFrame
    Click element    xpath=//*[@href="vpnSettingsView.html"]
    sleep    120
    Unselect Frame
    Select Frame    id=tabFrame
    sleep    120
    ${text_s2sVPN}    Get Text    xpath=//div[@id="divVpnPolicies_tblSummary"]/div[1]/span
    ${actual_s2sVPN}    get_tsr_value    ${text_s2sVPN}    Site To Site Policies: (\\d+) Policies Defined, \\d+ Policies Enabled, \\d+ Maximum Policies Allowed
    log to console    actual S2S=${actual_s2sVPN}
    execute javascript    window.deleteAllSAs()
    confirm action
    Comment    ${time}    set variable    60
    Comment    read_console_log    ${type}    ${time}    ${case_name}
    sleep    120
    ${text1_s2sVPN}    Get Text    xpath=//div[@id="divVpnPolicies_tblSummary"]/div[1]/span
    ${remain}    get_tsr_value    ${text1_s2sVPN}    Site To Site Policies: (\\d+) Policies Defined, \\d+ Policies Enabled, \\d+ Maximum Policies Allowed
    run keyword if    ${remain} ==0    log to console    remain=${remain} \ "Delete all" site-to-site vpn(phase2) successfully!
    ...    ELSE    log to console    Failed to "Delete all" site-to-site vpn(phase2) \ !
    Comment    Capture Page Screenshot
    close browser
    [Return]    ${actual_s2sVPN}

get_groupVPN_value
    [Arguments]    ${type}
    ###获取盒子相关数据##
    Comment    ${host_ip}    set variable    ${data[0]["HOST_IP"]}
    Comment    login_by_https_TLS    192.168.168.168    admin    password    firefox
    login_sonicwall
    Unselect Frame
    Select Frame    id=outlookFrame
    Click element    xpath=//*[@href="vpnSettingsView.html"]
    sleep    10
    Unselect Frame
    Select Frame    id=tabFrame
    sleep    5
    ${text_groupVPN}    Get Text    xpath=//div[@id="divVpnPolicies_tblSummary"]/div[2]/span
    ${actual_groupVPN}    get_tsr_value    ${text_groupVPN}    GroupVPN Policies: (\\d+) Policies Defined, \\d+ Policies Enabled, \\d+ Maximum Policies Allowed
    Capture Page Screenshot
    close browser
    [Teardown]
    [Return]    ${actual_groupVPN}

factory_default_configure
    [Arguments]    ${ip}    ${port}    ${sleep_time}
    [Documentation]    恢复出厂配置
    CLI-login-firewall    ${ip}    ${port}
    Telnet.Write    restore-defaults
    sleep    1
    Telnet.Set Prompt    [cancel]:
    sleep    1
    Telnet.Read Until Prompt
    Telnet.Write    yes
    sleep    ${sleep_time}

get_delete_rest-api-agent
    [Arguments]    ${type}
    login_sonicwall
    Unselect Frame
    Select Frame    id=outlookFrame
    Comment    Click element    css=[href="guestServiceSettings.html"]
    Click element    xpath=//*[@href="usersStatusView.html"]
    sleep    2
    ###查看nat policy的结果并删除###
    Click element    xpath=//*[@href="usersSettingsView.html"]
    sleep    5
    Unselect Frame
    Select Frame    id=tabFrame
    click element    xpath=//li[@id="divAuthentication_trigger"]
    sleep    2
    click element    xpath=//input[@value="Configure SSO"]
    sleep    3
    Comment    Unselect Frame
    ${titles}    Get Window Titles
    ${titles1}    Get From List    ${titles}    0
    ${titles2}    Get From List    ${titles}    1
    select Window    title=${titles2}
    click element    xpath=//a[@title="3rd Party API"]
    sleep    1
    click element    xpath=//a[@title="3rd-Party API Clients"]
    sleep    1
    Capture Page Screenshot
    ${actual_rest-api-agent}    get matching xpath count    xpath=//tbody/tr[@class="listItem"]
    log to console    actual_rest-api-agent=${actual_rest-api-agent}
    ###删除所有的连接###
    : FOR    ${i}    IN RANGE    ${actual_rest-api-agent}
    \    click element    //tbody/tr[2]//img[@title="Delete this API Client"]
    \    sleep    1
    Capture Page Screenshot
    click element    //*[value="OK"]
    sleep    2
    close browser
    [Return]    ${actual_rest-api-agent}

get_delete_access-rules
    [Arguments]    ${type}    ${case_name}
    login_sonicwall
    Unselect Frame
    Select Frame    id=outlookFrame
    Comment    Click element    css=[href="guestServiceSettings.html"]
    Click element    xpath=//*[@href="policyView.html"]
    sleep    60
    ###查看access rules的结果并删除###
    Unselect Frame
    Select Frame    id=tabFrame
    ${access-rule_total1}    get element attribute    xpath=//*/span[5]/span    title
    ${access-rule_total}    evaluate    '${access-rule_total1}'.split(' ')[0]
    ${GUI_access-rule}    trans_to_int    ${access-rule_total}
    Capture Page Screenshot
    Click element    xpath=//*[@class="toolbarAction swlDelAction actionWithDropdown"]
    sleep    2
    Click element    xpath=//li[@title="Delete all custom rules"]
    confirm action
    ${time}    set variable    100
    read_console_log    ${type}    ${time}    ${case_name}
    Capture Page Screenshot
    ${remain0}    get element attribute    xpath=//*/span[5]/span    title
    ${remain1}    evaluate    '${remain0}'.split(' ')[0]
    ${remain}    trans_to_int    ${remain1}
    log to console    Delete all! access rules remain=${remain}
    Comment    ${max_access-rule}    get_target_fromCSV    ${type}    Rules Per Table
    Comment    ${rtn}    set variable    ${max_access-rule}
    ${rtn}    set variable    500
    run keyword if    ${remain} < ${rtn}    log to console    "Delete all" access rules successfully!
    ...    ELSE    log to console    Failed to "Delete all" access rules!
    log to console    GUIl access rule=${GUI_access-rule}
    Capture Page Screenshot
    close browser
    [Return]    ${GUI_access-rule}

get_vlan_value
    [Arguments]    ${type}
    login_sonicwall
    Unselect Frame
    Select Frame    id=outlookFrame
    Comment    Click element    css=[href="guestServiceSettings.html"]
    Click element    xpath=//*[@href="netInterfaces.html"]
    sleep    5
    Unselect Frame
    Select Frame    id=tabFrame
    sleep    10
    ${actual_vlan}    get matching xpath count    xpath=//tr[@class="listItem childRow childRowLabel listItemZebra-0"]
    Capture Page Screenshot
    close browser
    [Return]    ${actual_vlan}

read_console_log
    [Arguments]    ${type}    ${run_time}
    ###获取盒子相关数据##
    SSHLibrary.Switch Connection    192.168.168.168    port= 22    timeout=10
    sleep    1
    SSHLibrary.Write    \r
    sleep    5
    ${rtn}    SSHLibrary.Read
    sleep    ${run_time}
    log    ${rtn}
    ${value}=    check_if_contain    ${rtn}    Stack trace of
    Run keyword if    ${value}== 1    run keywords    sleep    300
    ...    AND    Log to console    Console crashed!
    ...    ELSE    log to console    Console is normal!
    SSHLibrary.close Connection
    [Return]    ${value}

deleteAll_vlan
    [Arguments]    ${actual_vlan}
    SSH-login-firewall    192.168.168.168
    sleep    1
    ${max_range}    set variable    ${actual_vlan}
    : FOR    ${i}    IN RANGE    1    ${max_range}
    \    SSHLibrary.Write    no interface x0 vlan ${i}
    \    sleep    1
    SSHLibrary.Write    commit
    ${time}    evaluate    ${max_range}*7
    sleep    ${time}
    ${rtn}    SSHLibrary.read
    ${value}=    check_if_contain    ${rtn}    Changes made
    Run keyword if    ${value}== 1    log to console    Delete ${actual_vlan} vlan successfully!
    ...    ELSE    log to console    Failed to delete ${actual_vlan} vlan!
    SSHLibrary.Close Connection

get_delete_zone
    [Arguments]    ${type}    ${case_name}
    login_sonicwall
    sleep    60
    Unselect Frame
    Select Frame    id=outlookFrame
    Click element    xpath=//*[@href="zoneObjView.html"]
    sleep    80
    Unselect Frame
    Select Frame    id=tabFrame
    ${zone_total}    get element attribute    xpath=//*/span[3]/span    title
    Capture Page Screenshot
    ${actual_zone}    evaluate    '${zone_total}'.split(' ')[0]
    ${actual_zone_int}    trans_to_int    ${actual_zone}
    log to console    actual zone=${actual_zone_int}
    click element    xpath=//div[@class="toolbarAction swlDelAction actionWithDropdown"]
    sleep    10
    Click element    xpath=//li[@title="Delete all custom zone objects"]
    confirm action
    Capture Page Screenshot
    sleep    100
    Comment    ${time}    set variable    150
    Comment    read_console_log    ${type}    ${time}    ${case_name}
    ${remain0}    get element attribute    xpath=//*/span[3]/span    title
    ${remain}    evaluate    '${remain0}'.split(' ')[0]
    log to console    Delete all! zone remain=${remain}
    run keyword if    ${remain} < ${actual_zone}    log to console    "Delete all" zone ssuccessfully!
    ...    ELSE    log to console    Failed to "Delete all" \ zone!
    Capture Page Screenshot
    close browser
    [Return]    ${actual_zone}

CLI-config-Test-WLAN-X2
    [Arguments]    ${port}    ${ip}    ${mask}
    tel    interface ${port}
    tel    ip-assignment WLAN static
    tel    ip ${ip} netmask ${mask}
    tel    commit
    ${rtn}    Telnet.read
    ${b}=    check_if_contain    ${rtn}    --more--|--MORE--
    Run keyword if    ${b} == 1    Telnet.Write Bare    q
    sleep    1
    tel    exit
    tel    management ping
    tel    management https
    tel    user-login https
    tel    commit
    ${rtn0}    Telnet.read
    ${a}=    check_if_contain    ${rtn0}    --more--|--MORE--
    Run keyword if    ${a} == 1    Telnet.Write Bare    q
    sleep    1
    tel    exit

export Log
    [Arguments]    ${type}    ${case_name}
    ###Create log directory###
    ${path0}    evaluate    '${type}'+'-Cap'+'-'+'${version}'
    ${folder0}    evaluate    '${location}'+'/'+'${path0}'
    ${path1}    evaluate    '${type}'+'-'+'${version}'+'-'+'${case_name}'+'-Log'
    ${folder}    evaluate    '${folder0}'+'/'+'${path1}'
    Create Folder    ${folder}
    ${path}    evaluate    '${path0}'+'/'+'${path1}'
    ###export current conf和TSR###
    ${filename_exp}    evaluate    '${type}'+'-'+'${case_name}'+'.exp'
    ${filename_tsr}    evaluate    '${type}'+'-'+'${case_name}'+'.wri'
    Export_conf    ${ftp_username1}    ${ftp_password1}    ${ftpServer_ip}    ${path}    ${filename_exp}    ${type}
    export_tsr    ${ftp_username1}    ${ftp_password1}    ${ftpServer_ip}    ${path}    ${filename_tsr}    ${type}
    log to console    Export EXP and TSR files successfully!
    [Teardown]    SSHLibrary.close connection

export_tsr
    [Arguments]    ${username}    ${password}    ${ip}    ${path}    ${file}    ${type}
    SSHLibrary.Write    export tech-support-report ftp ftp://${username}:${password}@${ip}/${path}/${file}
    sleep    20
    ${result}    ${returnvalue}    Run Keyword And Ignore Error    SSHLibrary.Read Until    Upload complete
    : FOR    ${i}    IN RANGE    10
    \    run keyword if    '${result}' == 'FAIL'    sleep    20
    \    EXIT for loop if    '${result}' == 'PASS'
    \    ${result}    ${returnvalue}    Run Keyword And Ignore Error    SSHLibrary.Read Until    Upload complete
    run keyword if    '${result}' == 'FAIL'    log to console    Export tsr fail ,timeout!!
    ...    ELSE    log to console    Export tsr successfully!

get_delete_phase2
    [Arguments]    ${type}    ${case_name}
    ###获取盒子相关数据##
    login_sonicwall
    Unselect Frame
    Select Frame    id=outlookFrame
    Click element    xpath=//*[@href="vpnSettingsView.html"]
    sleep    120
    Unselect Frame
    Select Frame    id=tabFrame
    sleep    120
    ${text_phase2}    Get Text    xpath=//div[@id="divVpnTunnels_tblSummary"]/div[1]/span
    ${actual_phase2}    get_tsr_value    ${text_phase2}    (\\d+) Currently Active VPN Tunnels
    log to console    actual phase2=${actual_phase2}
    execute javascript    window.deleteAllSAs()
    confirm action
    Comment    ${time}    set variable    60
    Comment    read_console_log    ${type}    ${time}    ${case_name}
    sleep    120
    ${text1_s2sVPN}    Get Text    xpath=//div[@id="divVpnPolicies_tblSummary"]/div[1]/span
    ${remain}    get_tsr_value    ${text1_s2sVPN}    Site To Site Policies: (\\d+) Policies Defined, \\d+ Policies Enabled, \\d+ Maximum Policies Allowed
    run keyword if    ${remain} ==0    log to console    remain=${remain} \ "Delete all" site-to-site vpn(phase2) successfully!
    ...    ELSE    log to console    Failed to "Delete all" site-to-site vpn(phase2) \ !
    Comment    Capture Page Screenshot
    close browser
    [Return]    ${actual_phase2}

get_tunnelInterface_value
    [Arguments]    ${type}    ${num}
    login_sonicwall
    Unselect Frame
    Select Frame    id=outlookFrame
    Click element    xpath=//*[@href="netInterfaces.html"]
    sleep    5
    Unselect Frame
    Select Frame    id=tabFrame
    sleep    10
    ${text}    Get Text    xpath=/html/body/div[1]/form[1]/div[2]/div/div[2]/table/tbody
    log to console    ${text}
    ###判断是否加到了300个###
    log    ${text}
    ${value}=    check_if_contain    ${text}    10.${num}.1.1
    Run keyword if    ${value}== 1    log to console    Added to ${num} tunnel interfaces successfully!
    ...    ELSE    log to console    Failed to add ${num} tunnel interfaces !
    Comment    ${actual_tunnelInterface0}    set variable    0
    ${actual_tunnelInterface}    Run keyword if    ${value}== 1    set variable    ${num}
    ...    ELSE    set variable    0
    Capture Page Screenshot
    close browser
    [Return]    ${actual_tunnelInterface}

deleteAll_tunnelInterface
    SSH-login-firewall    192.168.168.168
    sleep    1
    : FOR    ${i}    IN RANGE    31    40
    \    SSHLibrary.Write    no tunnel-interface vpn V_T_I_${i}
    \    sleep    1
    SSHLibrary.Write    commit
    sleep    200
    SSHLibrary.close connection
    SSH-login-firewall    192.168.168.168
    sleep    1
    : FOR    ${i}    IN RANGE    40    80
    \    SSHLibrary.Write    no tunnel-interface vpn V_T_I_${i}
    \    sleep    1
    SSHLibrary.Write    commit
    sleep    200
    SSHLibrary.close connection
    SSH-login-firewall    192.168.168.168
    sleep    1
    : FOR    ${i}    IN RANGE    80    140
    \    SSHLibrary.Write    no tunnel-interface vpn V_T_I_${i}
    \    sleep    1
    SSHLibrary.Write    commit
    sleep    400
    SSHLibrary.close connection
    SSH-login-firewall    192.168.168.168
    sleep    1
    : FOR    ${i}    IN RANGE    140    193
    \    SSHLibrary.Write    no tunnel-interface vpn V_T_I_${i}
    \    sleep    1
    SSHLibrary.Write    commit
    sleep    300
    SSHLibrary.close connection

get_delete_addressGroup
    [Arguments]    ${type}    ${case_name}
    login_sonicwall
    Unselect Frame
    Select Frame    id=outlookFrame
    Click element    xpath=//*[@href="netInterfaces.html"]
    sleep    5
    Click element    xpath=//*[@href="addrObjView.html"]
    sleep    60
    Unselect Frame
    Select Frame    id=tabFrame
    Click element    xpath=//li[@id="grpFolder_trigger"]
    Comment    Capture Page Screenshot
    sleep    60
    ${addressGrp_total1}    get element attribute    xpath=//table[@id="grpFolderTableFooterId"]//span[4]/span    title
    ${addressGrp_total}    evaluate    '${addressGrp_total1}'.split(' ')[0]
    ${actual_addressGrp}    trans_to_int    ${addressGrp_total}
    Capture Page Screenshot
    log to console    actual address group=${actual_addressGrp}
    Click element    xpath=//*[@class="toolbarAction swlDelAction actionWithDropdown"]
    sleep    3
    Click element    xpath=//li[@title="Delete all custom address object groups"]
    confirm action
    ${time}    evaluate    ${actual_addressGrp}/10
    Comment    read_console_log    ${type}    ${time}    ${case_name}
    close browser
    login_sonicwall
    Unselect Frame
    Select Frame    id=outlookFrame
    Comment    Click element    css=[href="guestServiceSettings.html"]
    Click element    xpath=//*[@href="netInterfaces.html"]
    sleep    5
    Click element    xpath=//*[@href="addrObjView.html"]
    sleep    60
    Unselect Frame
    Select Frame    id=tabFrame
    Click element    xpath=//li[@id="grpFolder_trigger"]
    sleep    120
    ${remain0}    get element attribute    xpath=//table[@id="grpFolderTableFooterId"]//span[4]/span    title
    ${remain1}    evaluate    '${remain0}'.split(' ')[0]
    ${remain}    trans_to_int    ${remain1}
    log to console    Delete all! address group remain=${remain}
    ${rtn}    set variable    500
    run keyword if    ${remain} < ${rtn}    log to console    "Delete all" address group successfully!
    ...    ELSE    run keywords    log to console    Failed to "Delete all" address group!
    ...    AND    export log    ${type}    ${case_name}
    log to console    actual address group=${actual_addressGrp}
    Comment    Capture Page Screenshot
    Comment    close browser
    [Teardown]    Close All Browsers
    [Return]    ${actual_addressGrp}

runScript
    [Arguments]    ${command}    ${time}    ${num}    ${test_case}
    SSHLibrary.read
    SSHLibrary.write    ${command}
    sleep    ${time}
    Comment    ${rtn}    SSHLibrary.read
    Comment    ${rtn}=    SSHLibrary.Read Until Regexp    ]#
    Comment    ${More}=    check_if_contain    ${rtn}    --MORE--
    Comment    run keyword if    ${More}== 1    SSHLibrary.Write Bare    q
    Comment    ${Error}=    check_if_contain    ${rtn}    Error
    Comment    run keyword if    ${Error} == 1    FAIL    命令行执行失败！！
    Comment    ${More}=    check_if_contain    ${rtn}    unsuccessful
    Comment    run keyword if    ${More}== 1    Log to console    Can't add ${num} \ ${test_case} !
    ...    ELSE    log to console    Add ${num} \ ${test_case} successfully!
    SSHLibrary.close connection

get_delete_user-login
    [Arguments]    ${type}
    login_sonicwall
    sleep    5
    Unselect Frame
    Select Frame    id=outlookFrame
    Click element    xpath=//*[@href="usersStatusView.html"]
    sleep    10
    Unselect Frame
    Select Frame    id=tabFrame
    Capture Page Screenshot
    sleep    5
    Comment    ${actual_user-login}    get matching xpath count    xpath=//table[@id="usersTable"]/tbody/tr
    ${text}    get text    xpath=//td[@id="pageButtons"]/table/tbody/tr
    ${text1}    evaluate    '${text}'.split('of ')[-1]
    ${actual_user-login1}    evaluate    '${text1}'.replace(')',' ')
    ${actual_user-login}    evaluate    ${actual_user-login1}-1
    log to console    actual_user-login:${actual_user-login}
    Unselect Frame
    Select Frame    id=outlookFrame
    sleep    5
    Click element    xpath=//*[@href="userObjView.html"]
    sleep    14
    Unselect Frame
    Select Frame    id=tabFrame
    Click element    //ul/*[@id="userFolder_trigger"]
    sleep    15
    Capture Page Screenshot
    click element    xpath=//div[@class="toolbarAction swlDelAction actionWithDropdown"]
    sleep    5
    Click element    xpath=//li[@title="Delete all users"]
    confirm action
    sleep    100
    Capture Page Screenshot
    ${remain0}    get element attribute    xpath=//*/span[3]/span    title
    ${remain}    evaluate    '${remain0}'.split(' ')[0]
    log to console    Delete all! local user remain=${remain}
    run keyword if    ${remain} ==0    log to console    "Delete all" local user ssuccessfully!
    ...    ELSE    log to console
    log to console    delete all local user=delete all user-login connection
    Capture Page Screenshot
    close browser
    [Return]    ${actual_user-login}

user-login_loopRun
    [Arguments]    ${num_loop}    ${run_time}    ${X2_IP}    ${num}    ${type}    ${case_name}
    ssh_login_capBed    ${tb_ip}
    SSHLibrary.Write    cd /root/capacityTB/bin
    sleep    2
    SSHLibrary.Write    \\cp -r capacityConf_9_user-login_noUser.xml capacityConf_9.xml
    sleep    1
    SSHLibrary.Write    cd /root/capacityTB/scripts
    sleep    2
    : FOR    ${i}    IN RANGE    ${num_loop}
    \    SSHLibrary.Write    \\cp -r ula_0_${i}.pl ula.pl
    \    sleep    1
    \    ssh_execute_command    perl /root/capacityTB/bin/capacityInit.pl -fw ${X2_IP} -o user-login -n ${num}    ${run_time}    ${type}    ${case_name}

user-login_lastRun
    [Arguments]    ${run_time}    ${type}    ${case_name}    ${X2_IP}    ${num}
    ssh_login_capBed    ${tb_ip}
    SSHLibrary.Write    cd /root/capacityTB/bin
    sleep    2
    SSHLibrary.Write    \\cp -r capacityConf_9_user-login_noUser.xml capacityConf_9.xml
    sleep    1
    SSHLibrary.Write    cd /root/capacityTB/scripts
    sleep    2
    SSHLibrary.Write    \\cp -r ula_1.pl ula.pl
    sleep    1
    ssh_execute_command    perl /root/capacityTB/bin/capacityInit.pl -fw ${X2_IP} -o user-login -n ${num}    ${run_time}    ${type}    ${case_name}

get_delete_dynamic-ao
    [Arguments]    ${type}
    ###获取盒子相关数据##
    ${host_ip}    ${console_ip}    ${console_port}    get_ip_port    ${type}
    Comment    ${host_ip}    set variable    ${data[0]["HOST_IP"]}
    login_by_https_TLS    ${host_ip}    admin    password    firefox
    sleep    4
    Unselect Frame
    Select Frame    name=logoFrame
    sleep    2
    click element    xpath=//div//*[@id="nav_manage"]
    sleep    8
    Unselect Frame
    Select Frame    name=outlookFrame
    sleep    2
    click element    xpath=//*[@href="matchObjView.html"]
    sleep    5
    click element    xpath=//*[@href="dynObjView.html"]
    sleep    10
    Unselect Frame
    Select Frame    id=tabFrame
    ${dynamic-ag_total1}    get element attribute    xpath=//*/span[3]/span    title
    Capture Page Screenshot
    ${dynamic-ag_total}    evaluate    '${dynamic-ag_total1}'.split(' ')[0]
    ${actual_dynamic-ag}    trans_to_int    ${dynamic-ag_total}
    log to console    actual_dynamic-ag=${actual_dynamic-ag}
    Comment    execute javascript    window.checkAllDelete(this)
    click element    xpath=//input[@name="checkAllObjs"]
    sleep    4
    click element    xpath=//div[@class="toolbarAction swlDelAction actionWithDropdown"]
    sleep    3
    click element    xpath=//li[@title="Delete marked dynamic external objects"]
    confirm action
    sleep    60
    Capture Page Screenshot
    ${remain0}    get element attribute    xpath=//*/span[3]/span    title
    ${remain}    evaluate    '${remain0}'.split(' ')[0]
    log to console    Delete all! local user remain=${remain}
    run keyword if    ${remain} ==0    log to console    "Delete all" dynamic-ao ssuccessfully!
    ...    ELSE    log to console    Failed to "Delete all" dynamic ao!
    Capture Page Screenshot
    close browser
    [Return]    ${actual_dynamic-ag}

soniccore_register
    [Arguments]    ${sn}    ${code1}    ${code2}    ${type}
    login_by_https    192.168.168.168    admin    password    firefox
    sleep    20
    run keyword if    '${type}'=='4Core' or '${type}'=='8Core' or '${type}'=='16Core'    Register_VirtualFW_by_https    shsystem@163.com    sonicwall    ${sn}    ${code1}
    ...    ${code2}
    ...    ELSE    Register_VirtualFW_by_https    lzhu@sonicwall.com    password    ${sn}    ${code1}
    ...    ${code2}
    Comment    run keyword if    '${type}'=='2Core' or '${type}'=='3Core' or '${type}'=='4Core' or '${type}'=='8Core' or '${type}'=='16Core'    Register_VirtualFW_by_https    lzhu@sonicwall.com    password    ${sn}
    ...    ${code1}    ${code2}
    ...    ELSE    Register_VirtualFW_by_https    shsystem@163.com    sonicwall    ${sn}    ${code1}
    ...    ${code2}
    [Teardown]    Close Browser

ssh_enter_command
    [Arguments]    ${command}    ${time}=1
    [Documentation]    Telnet配置命令行 并返回回显.回显中如果有Error提示，返回执行失败。
    SSHLibrary.read
    SSHLibrary.write    ${command}
    sleep    ${time}
    ${rtn}=    SSHLibrary.Read Until Regexp    \#|--MORE--
    ${More}=    check_if_contain    ${rtn}    --MORE--
    run keyword if    ${More}== 1    SSHLibrary.Write Bare    q
    ${Error}=    check_if_contain    ${rtn}    Error
    run keyword if    ${Error} == 1    FAIL    命令行执行失败！！
    [Return]    ${rtn}

Get_License
    [Arguments]    ${equipment_type}
    @{sn}=    read xls file    Virtual_topology.xlsx    License
    : FOR    ${i}    IN    @{sn}
    \    ${rtn}=    check if contain    ${i["model"]}    ${equipment_type}
    \    ${sn}    set variable if    ${rtn} == 1    ${i["sn"]}
    \    ${code1}    set variable if    ${rtn} == 1    ${i["code1"]}
    \    ${code2}    set variable if    ${rtn} == 1    ${i["code2"]}
    \    Exit For Loop If    ${rtn} == 1
    [Return]    ${sn}    ${code1}    ${code2}

deregister
    login_by_https    192.168.168.168    admin    password    firefox
    sleep    5
    switch to classic mode
    sleep    5
    Select Frame    id=outlookFrame
    sleep    5
    Click Element    xpath=//*[@href="systemStatusView.html"]
    sleep    5
    Click Element    xpath=//*[@href="activationView.html"]
    sleep    5
    Unselect Frame
    Select Frame    id=tabFrame
    Click Element    name=deregisterButton
    sleep    25
    Handle Alert    action=ACCEPT
    sleep    300
    [Teardown]    Close Browser

del_addressGrp
    [Arguments]    ${type}
    ###获取target值##
    ${test_case}    evaluate    'Address Groups'
    ${case_name}    set variable    addressGrp
    ${max_addressGrp}    get_target_fromCSV    ${type}    ${test_case}
    Comment    ${host_ip}    ${console_ip}    ${console_port}    get_ip_port    ${type}
    ###删除所有连接###
    Comment    login_sonicwall
    login_by_https_ex_TLS    192.168.168.168    admin    password    firefox
    Unselect Frame
    Select Frame    id=outlookFrame
    Click element    xpath=//*[@href="zoneObjView.html"]
    sleep    8
    Click element    xpath=//*[@href="addrObjView.html"]
    sleep    60
    Unselect Frame
    Select Frame    id=tabFrame
    Click element    xpath=//li[@id="grpFolder_trigger"]
    Comment    Capture Page Screenshot
    sleep    60
    ${addressGrp_total1}    get element attribute    xpath=//table[@id="grpFolderTableFooterId"]//span[4]/span    title
    ${addressGrp_total}    evaluate    '${addressGrp_total1}'.split(' ')[0]
    ${actual_addressGrp}    trans_to_int    ${addressGrp_total}
    log to console    actual address group=${actual_addressGrp}
    Click element    xpath=//*[@class="toolbarAction swlDelAction actionWithDropdown"]
    sleep    3
    Click element    xpath=//li[@title="Delete all custom address object groups"]
    sleep    1
    confirm action
    ${time}    set variable    60
    sleep    ${time}
    Comment    read_console_log    ${type}    ${time}    ${case_name}
    Comment    close browser
    ###写入测试结果##
    ${path}    ${name}    get_tsr_file    ${type}
    write_to_xlsFile    ${path}    ${name}.xlsx    2    1    ${actual_addressGrp}
    ${address-g_result}    set variable    ${max_addressGrp}/${actual_addressGrp}
    write_to_xlsFile    ${path}    ${name}.xlsx    3    1    ${address-g_result}
    ###Check是否删除成功###
    Comment    login_sonicwall
    Comment    Unselect Frame
    Comment    Select Frame    id=outlookFrame
    Comment    Click element    xpath=//*[@href="netInterfaces.html"]
    Comment    sleep    8
    Comment    Click element    xpath=//*[@href="addrObjView.html"]
    Comment    sleep    100
    Comment    Unselect Frame
    Comment    Select Frame    id=tabFrame
    Comment    Click element    xpath=//li[@id="grpFolder_trigger"]
    Comment    Comment    Capture Page Screenshot
    Comment    sleep    100
    ${addressGrp_remain0}    get element attribute    xpath=//table[@id="grpFolderTableFooterId"]//span[4]/span    title
    ${addressGrp_remain1}    evaluate    '${addressGrp_remain0}'.split(' ')[0]
    ${addressGrp_remain}    trans_to_int    ${addressGrp_remain1}
    log to console    After 60+s, addressGrp_remain=${addressGrp_remain}
    close browser
    [Return]    ${actual_addressGrp}

del_addressObj
    [Arguments]    ${type}    ${init_value}
    ###获取盒子相关数据##
    CLI-noItems    no address-objects
    sleep    120
    ${curr_value1}    ${max_value1}    get_defaultvalue_and_targetvalue    address-objects
    log to console    After 120+s, remain AO=${curr_value1}
    run keyword if    '${curr_value1}' == '${init_value}'    log to console    delete all objects successfully!!
    ...    ELSE IF    '${curr_value1}' == '${max_value1}'    log to console    FAILED TO DELETED ALL OBJECTS!
    ...    ELSE    log to console    After 120+s, just deleted a part of address objects but not all!

delete_x0_dhcpRanges
    [Arguments]    ${type}
    login_sonicwall
    Unselect Frame
    Select Frame    id=outlookFrame
    Click element    xpath=//*[@href="netInterfaces.html"]
    sleep    2
    Click element    xpath=//*[@href="dhcpServerView.html"]
    sleep    10
    Capture Page Screenshot
    Unselect Frame
    Select Frame    id=tabFrame
    Click element    //*[@title="Delete this entry"]
    sleep    2
    confirm action
    sleep    10
    Capture Page Screenshot
    close browser

get_delete_dhcp
    [Arguments]    ${type}    ${max_dhcp}
    ###获取当前dhcp总数###
    login_sonicwall
    Unselect Frame
    Select Frame    id=outlookFrame
    Click element    xpath=//*[@href="netInterfaces.html"]
    sleep    2
    Click element    xpath=//*[@href="dhcpServerView.html"]
    Capture Page Screenshot
    sleep    60
    Unselect Frame
    Select Frame    id=tabFrame
    ${text}    get text    xpath=//tr/td[2]/table/tbody/tr
    ${text1}    evaluate    '${text}'.split('of ')[-1]
    ${actual_dhcp}    evaluate    '${text1}'.replace(')',' ')
    log to console    actual_dhcp=${actual_dhcp}
    ###将最大值写入TSR表格中###
    ${path}    ${name}    get_tsr_file    ${type}
    write_to_xlsFile    ${path}    ${name}.xlsx    2    16    ${actual_dhcp}
    ${dhcp_result}    set variable    ${max_dhcp}/${actual_dhcp}
    write_to_xlsFile    ${path}    ${name}.xlsx    3    16    ${dhcp_result}
    ###删除所有dhcp连接###
    execute javascript    window.delAllObjects(0)
    sleep    3
    confirm action
    sleep    100
    Capture Page Screenshot
    ${text0}    get text    xpath=//tr/td[2]/table/tbody/tr
    ${text01}    evaluate    '${text0}'.split('of ')[-1]
    ${remain_dhcp}    evaluate    '${text01}'.replace(')',' ')
    log to console    remain_dhcp=${remain_dhcp}
    run keyword if    ${remain_dhcp}==0    log to console    Deleted all dhcp successfully!
    ...    ELSE    Failed to delete all dhcp!remain_dhcp=${remain_dhcp}
    close browser
    [Return]    ${actual_dhcp}

recover_orig_conf
    [Arguments]    ${type}
    ###Recover configuration###
    log to console    Factory default now! to recover orig conf!
    Comment    SSH-login-firewall    192.168.168.168
    Comment    sleep    1
    Comment    SSH-Factory-Restore    400
    configure firewall    ${type}
    [Teardown]    close all browsers

configure firewall
    [Arguments]    ${type}
    ###enable x0 ssh###
    Comment    login_by_https    192.168.168.168    admin    password    firefox
    Comment    sleep    5
    Comment    Comment    switch to classic mode
    Comment    Comment    sleep    5
    Comment    Enbale X0 SSH_https
    Comment    sleep    5
    Comment    Close Browser
    Comment    ###Factory-Restore###
    Comment    SSH-login-firewall    192.168.168.168
    Comment    Set Client Configuration    prompt=#
    Comment    SSH-Factory-Restore    300
    Comment    ###enable x0 ssh after reboot###
    Comment    login_by_https    192.168.168.168    admin    password    firefox
    Comment    sleep    5
    Comment    Comment    switch to classic mode
    Comment    Comment    sleep    5
    Comment    Enbale X0 SSH_https
    Comment    sleep    5
    Comment    Close Browser
    ###获取盒子相关数据##
    @{data}=    read xls file    Virtual_topology.xlsx    topology
    ###ping gateway check####
    SSH-login-firewall    192.168.168.168
    sleep    1
    SSH-config_wan_ip    X1    ${data[0]["HOST_IP"]}    ${data[0]["NETMASK"]}    ${data[0]["GATEWAY"]}
    sleep    1
    SSHLibrary.Write    ping ${data[0]["GATEWAY"]}
    sleep    5
    SSHLibrary.Read Until    is alive
    SSHLibrary.Close Connection
    ###register ,max 5time###
    @{data}=    read xls file    Virtual_topology.xlsx    License
    ${sn}    ${code1}    ${code2}    Get_License    ${type}
    ${result}    ${returnvalue}    Run Keyword And Ignore Error    soniccore_register    ${sn}    ${code1}    ${code2}
    ...    ${type}
    : FOR    ${i}    IN RANGE    5
    \    sleep    10
    \    EXIT for loop if    '${result}' == 'PASS'
    \    ${result}    ${returnvalue}    Run Keyword And Ignore Error    soniccore_register    ${sn}    ${code1}
    \    ...    ${code2}    ${type}
    Run Keyword IF    '${result}' == 'FAIL'    FAIL    Firewall register failed!!
    ...    ELSE    sleep    180
    LOG TO CONSOLE    Finish firewall config!
    ###Enable TLS###
    Enable_TLS    192.168.168.168    admin    password    firefox
    LOG TO CONSOLE    Finish enable TLS! Rebooting service!
    sleep    240
    Comment    SSHLibrary.Close Connection

del_accessRules
    [Arguments]    ${type}    ${actual_access-rule}
    ###获取盒子相关数据##
    ${test_case}    evaluate    'Rules Per Table'
    ${case_name}    set variable    access_rule
    ###删除所有连接###
    login_sonicwall
    Unselect Frame
    Select Frame    id=outlookFrame
    Click element    xpath=//*[@href="policyView.html"]
    sleep    60
    Unselect Frame
    Select Frame    id=tabFrame
    Capture Page Screenshot
    sleep    20
    Click element    xpath=//*[@class="toolbarAction swlDelAction actionWithDropdown"]
    sleep    5
    Click element    xpath=//li[@title="Delete all custom rules"]
    sleep    2
    confirm action
    ${time}    set variable    200
    close browser
    ${returnValue}    read_console_log    ${type}    ${time}    ${case_name}
    ${log_content}    set variable    After "DELETE ALL" ${case_name}, console crashed!Please refer to SOSV-3116
    ${col}    set variable    15
    ${remain_accessRules}    run keyword if    ${returnValue}==1    run keywords    log to console    After "DELETE ALL", console crashed!
    ...    AND    log_to_xlsx    ${type}    ${col}    ${log_content}
    ...    ELSE    get_accessRule_tsr    ${actual_access-rule}

get_accessRule_tsr
    [Arguments]    ${actual_access-rule}
    SSH-login-firewall    192.168.168.168
    sleep    1
    SSHLibrary.Write    \r
    SSHLibrary.write    show tech-support-report access-rules
    sleep    30
    ${tsr_o}    SSHLibrary.read
    ${remain_accessRules}    get tsr value    ${tsr_o}    Current size:\\s+(\\d+)
    ${max_value}    get tsr value    ${tsr_o}    Maximum total size:\\s+(\\d+)
    SSHLibrary.Write Bare    q
    SSHLibrary.write    \r
    run keyword if    ${remain_accessRules}<=500    log to console    After 300+s,deleted all access rules successfully!remain_accessRules:${remain_accessRules}
    ...    ELSE IF    ${remain_accessRules}==${actual_access-rule}    log to console    After 300+s,DELETED ALL ACCESS RULES FAILED!remain_accessRules:${remain_accessRules}==actual_access-rule:${actual_access-rule}
    ...    ELSE    log to console    After 300+s,Just deleted a part of access rules!remain_accessRules:${remain_accessRules}
    SSHLibrary.Close Connection

log_to_xlsx
    [Arguments]    ${type}    ${col}    ${log_content}
    ${path}    ${name}    get_tsr_file    ${type}
    write_to_xlsFile    ${path}    ${name}.xlsx    4    ${col}    ${log_content}

config_wan_grpVPN
    [Arguments]    ${type}
    ###配置Phase1###
    login_sonicwall
    sleep    20
    Unselect Frame
    Select Frame    id=outlookFrame
    Click element    xpath=//*[@href="zoneObjView.html"]
    sleep    20
    Unselect Frame
    Select Frame    id=tabFrame
    execute javascript    window.editZoneObj(1)
    sleep    2
    Unselect Frame
    ${titles}    Get Window Titles
    ${titles1}    Get From List    ${titles}    0
    ${titles2}    Get From List    ${titles}    1
    log to console    titles1:${titles1};titles2:${titles2}
    Select Window    title=${titles2}
    sleep    2
    Select checkbox    id=zoGroupVpn0
    sleep    1
    Capture Page Screenshot
    Click element    name=ok
    sleep    2
    Select Window    title=${titles1}
    Select Frame    id=outlookFrame
    Click element    xpath=//*[@href="vpnSettingsView.html"]
    sleep    5
    Unselect Frame
    Select Frame    id=tabFrame
    sleep    2
    ${peer_ID}    Get Element Attribute    name=firewallId@value
    sleep    2
    Select checkbox    name=uiEnableVpnPolicy_0
    sleep    2
    Comment    Click element    xpath=//img[@alt="Edit this entry"]
    Click element    xpath=/html/body/div[1]/form/div[2]/div/div[6]/table/tbody/tr/td[9]/a[1]/img
    sleep    4
    ${titles0}    Get Window Titles
    ${titles01}    Get From List    ${titles0}    0
    ${titles02}    Get From List    ${titles0}    1
    log to console    titles01:${titles01};titles02:${titles02}
    select Window    title=${titles02}
    ${shared_key}    Get Element Attribute    name=ipsecESPKey@value
    ${Ixia_info}    set variable    Pre Shared Key:${shared_key}; Peer ID Value:${peer_ID}
    log to console    Ixiaload conf info: ${Ixia_info}
    log to xlsx    ${type}    28    ${Ixia_info}
    sleep    2
    Click element    id=tab_background_3
    sleep    2
    Unselect checkbox    id=ipsecXauthClient
    sleep    2
    Select from list by value    id=ipsecNoAuthAccessNetwork    X0 Subnet
    sleep    2
    Click element    name=ok
    sleep    2
    [Teardown]    Close All Browsers

sslvpn_loopRun
    [Arguments]    ${num}    ${script_name}
    : FOR    ${i}    IN RANGE    0    ${num}
    \    SSHLibrary.Open Connection    10.7.3.251    port= 22    timeout=5
    \    SSHLibrary.Login    root    password    delay=5
    \    SSHLibrary.Write    cd /root/sslvpn
    \    log to console    Start ${i}th running!
    \    SSHLibrary.Write    ./${script_name}
    \    sleep    900

sslvpn_lastRun
    [Arguments]    ${script_name}
    : FOR    ${i}    IN RANGE    0    1
    \    SSHLibrary.Open Connection    10.7.3.251    port= 22    timeout=5
    \    SSHLibrary.Login    root    password    delay=5
    \    SSHLibrary.Write    cd /root/sslvpn
    \    log to console    Start the last running!
    \    SSHLibrary.Write    ./${script_name}
    \    sleep    900

config_sslvpn
    SSH-login-firewall    192.168.168.168
    sleep    1
    SSHLibrary.Write    ssl-vpn server
    sleep    1
    SSHLibrary.Write    access WAN
    sleep    2
    SSHLibrary.Write    session-timeout 9999
    sleep    2
    SSHLibrary.Write    commit
    sleep    10
    SSHLibrary.Write    \r
    SSHLibrary.Write    exit
    sleep    1
    SSHLibrary.Write    ssl-vpn profile
    sleep    2
    SSHLibrary.Write    device-profile "Default Device Profile"
    sleep    2
    SSHLibrary.Write    network-address network 12.1.0.0 /16
    sleep    3
    ${rtn}    SSHLibrary.read
    ${a}=    check_if_contain    ${rtn}    [yes]:
    Run keyword if    ${a} == 1    SSHLibrary.write    yes
    ...    ELSE    sleep    1
    SSHLibrary.Write    \r
    sleep    1
    SSHLibrary.Write    routes
    SSHLibrary.Write    route name "X0 Subnet"
    SSHLibrary.Write    commit
    sleep    10
    SSHLibrary.Write    exit
    sleep    1
    SSHLibrary.Write    exit
    sleep    1
    SSHLibrary.Write    exit
    sleep    1
    SSHLibrary.Write    user local
    sleep    1
    SSHLibrary.Write    user test
    sleep    1
    SSHLibrary.Write    password sonicwall2010
    sleep    1
    SSHLibrary.Write    member-of "SSLVPN Services"
    sleep    1
    SSHLibrary.Write    vpn-client-access name "X0 Subnet"
    sleep    1
    SSHLibrary.Write    commit
    sleep    10
    SSHLibrary.close connection

get_delete_sslvpn
    [Arguments]    ${type}    ${max_sslvpn}
    login_sonicwall
    sleep    5
    Unselect Frame
    Select Frame    id=outlookFrame
    Click element    xpath=//*[@href="sslvpnStatus.html"]
    sleep    10
    Unselect Frame
    Select Frame    id=tabFrame
    sleep    2
    ${sslvpn_total1}    get element attribute    xpath=//table[@id="ActSessFolderTableFooterId"]//span[3]/span    title
    ${sslvpn_total}    evaluate    '${sslvpn_total1}'.split(' ')[0]
    ${actual_sslvpn}    trans_to_int    ${sslvpn_total}
    log to console    actual sslvpn:${actual_sslvpn}
    Capture Page Screenshot
    ###写入测试结果##
    ${path}    ${name}    get_tsr_file    ${type}
    write_to_xlsFile    ${path}    ${name}.xlsx    2    30    ${actual_sslvpn}
    ${sslvpn_result}    set variable    ${max_sslvpn}/${actual_sslvpn}
    write_to_xlsFile    ${path}    ${name}.xlsx    3    30    ${sslvpn_result}
    ###删除所有连接###
    Click element    xpath=//*[@class="toolbarAction swlDelAction actionWithDropdown"]
    sleep    3
    Click element    xpath=//li[@title="Disconnect all users"]
    sleep    1
    Confirm action
    sleep    60
    ${sslvpn_total01}    get element attribute    xpath=//table[@id="ActSessFolderTableFooterId"]//span[3]/span    title
    ${sslvpn_total0}    evaluate    '${sslvpn_total01}'.split(' ')[0]
    ${remain_sslvpn}    trans_to_int    ${sslvpn_total0}
    log to console    remain sslvpn:${remain_sslvpn}
    run keyword if    ${remain_sslvpn}==0    log to console    Deleted all ssl vpn connections successfully!!remain sslvpn:${remain_sslvpn}
    ...    ELSE    log to console    Failded to delete all sslvpn connections!remain sslvpn:${remain_sslvpn}
    close browser
    [Return]    ${actual_sslvpn}

twologin
    Select Frame    id=authFrm
    Clear Element Text    id=userName
    Input Text    id=userName    admin
    Clear Element Text    name=pwd
    Input Password    name=pwd    password
    ${value}    Get Value    name=pwd
    Click Button    name=Submit
    sleep    10
    ${result}    ${returnvalue}    Run Keyword And Ignore Error    Page Should Contain    This appliance is not registered
    run keyword if    '${result}' == 'PASS'    Click Element    id=regLaterButt
    ${result}    ${returnvalue}    Run Keyword And Ignore Error    Page Should Contain    OK to preempt existing administrator?
    run keyword if    '${result}' == 'PASS'    Click Button    name=Continue
    sleep    1
    ${result}    ${returnvalue}    Run Keyword And Ignore Error    Handle Alert    action=ACCEPT
    sleep    1

addTunnelInterface_192
    SSH-login-firewall    192.168.168.168
    Set Client Configuration    prompt=#
    : FOR    ${i}    IN RANGE    1    40
    \    SSHLibrary.Write    tunnel-interface vpn V_T_I_${i}
    \    SSHLibrary.Write    policy test${i}
    \    sleep    1
    \    SSHLibrary.Write    ip-assignment VPN static
    \    sleep    2
    \    SSHLibrary.Write    ip 10.${i}.1.1
    \    SSHLibrary.Write    netmask 255.255.255.0
    \    SSHLibrary.Write    commit
    \    sleep    6
    \    ${rtn1}    SSHLibrary.read
    \    ${a}=    check_if_contain    ${rtn1}    Changes made
    \    EXIT for loop if    ${a}!=1
    \    SSHLibrary.Write    exit
    \    sleep    1
    \    SSHLibrary.Write    exit
    \    sleep    3
    SSHLibrary.close connection
    SSH-login-firewall    192.168.168.168
    Set Client Configuration    prompt=#
    : FOR    ${i}    IN RANGE    40    80
    \    SSHLibrary.Write    tunnel-interface vpn V_T_I_${i}
    \    SSHLibrary.Write    policy test${i}
    \    sleep    1
    \    SSHLibrary.Write    ip-assignment VPN static
    \    sleep    2
    \    SSHLibrary.Write    ip 10.${i}.1.1
    \    SSHLibrary.Write    netmask 255.255.255.0
    \    SSHLibrary.Write    commit
    \    sleep    6
    \    ${rtn1}    SSHLibrary.read
    \    ${a}=    check_if_contain    ${rtn1}    Changes made
    \    EXIT for loop if    ${a}!=1
    \    SSHLibrary.Write    exit
    \    sleep    1
    \    SSHLibrary.Write    exit
    \    sleep    3
    SSHLibrary.close connection
    SSH-login-firewall    192.168.168.168
    Set Client Configuration    prompt=#
    : FOR    ${i}    IN RANGE    80    120
    \    SSHLibrary.Write    tunnel-interface vpn V_T_I_${i}
    \    SSHLibrary.Write    policy test${i}
    \    sleep    1
    \    SSHLibrary.Write    ip-assignment VPN static
    \    sleep    2
    \    SSHLibrary.Write    ip 10.${i}.1.1
    \    SSHLibrary.Write    netmask 255.255.255.0
    \    SSHLibrary.Write    commit
    \    sleep    8
    \    ${rtn1}    SSHLibrary.read
    \    ${a}=    check_if_contain    ${rtn1}    Changes made
    \    EXIT for loop if    ${a}!=1
    \    SSHLibrary.Write    exit
    \    sleep    1
    \    SSHLibrary.Write    exit
    \    sleep    3
    SSHLibrary.close connection
    SSH-login-firewall    192.168.168.168
    Set Client Configuration    prompt=#
    : FOR    ${i}    IN RANGE    120    160
    \    SSHLibrary.Write    tunnel-interface vpn V_T_I_${i}
    \    SSHLibrary.Write    policy test${i}
    \    sleep    1
    \    SSHLibrary.Write    ip-assignment VPN static
    \    sleep    2
    \    SSHLibrary.Write    ip 10.${i}.1.1
    \    SSHLibrary.Write    netmask 255.255.255.0
    \    SSHLibrary.Write    commit
    \    sleep    10
    \    ${rtn1}    SSHLibrary.read
    \    ${a}=    check_if_contain    ${rtn1}    Changes made
    \    EXIT for loop if    ${a}!=1
    \    SSHLibrary.Write    exit
    \    sleep    1
    \    SSHLibrary.Write    exit
    \    sleep    3
    SSHLibrary.close connection
    SSH-login-firewall    192.168.168.168
    Set Client Configuration    prompt=#
    : FOR    ${i}    IN RANGE    160    193
    \    SSHLibrary.Write    tunnel-interface vpn V_T_I_${i}
    \    SSHLibrary.Write    policy test${i}
    \    sleep    1
    \    SSHLibrary.Write    ip-assignment VPN static
    \    sleep    2
    \    SSHLibrary.Write    ip 10.${i}.1.1
    \    SSHLibrary.Write    netmask 255.255.255.0
    \    SSHLibrary.Write    commit
    \    sleep    12
    \    ${rtn1}    SSHLibrary.read
    \    ${a}=    check_if_contain    ${rtn1}    Changes made
    \    EXIT for loop if    ${a}!=1
    \    SSHLibrary.Write    exit
    \    sleep    1
    \    SSHLibrary.Write    exit
    \    sleep    3
    SSHLibrary.close connection

addTunnelInterface
    [Arguments]    ${num}
    SSH-login-firewall    192.168.168.168
    Set Client Configuration    prompt=#
    ${N}    evaluate    ${num}+1
    : FOR    ${i}    IN RANGE    1    ${N}
    \    SSHLibrary.Write    tunnel-interface vpn V_T_I_${i}
    \    SSHLibrary.Write    policy test${i}
    \    sleep    1
    \    SSHLibrary.Write    ip-assignment VPN static
    \    sleep    2
    \    SSHLibrary.Write    ip 10.${i}.1.1
    \    SSHLibrary.Write    netmask 255.255.255.0
    \    SSHLibrary.Write    commit
    \    sleep    12
    \    ${rtn1}    SSHLibrary.read
    \    ${a}=    check_if_contain    ${rtn1}    Changes made
    \    EXIT for loop if    ${a}!=1
    \    SSHLibrary.Write    exit
    \    sleep    1
    \    SSHLibrary.Write    exit
    \    sleep    3
    SSHLibrary.close connection

evaluate_for_if
    [Arguments]    ${num0}    ${num1}
    ${num0}    set variable    0
    ${num0}    evaluate    ${num1}
    [Return]    ${num0}

sdwan-addVLANinterface
    [Arguments]    ${type}    ${num}
    ${time}    evaluate    ${num}*10+100
    ${host_ip}    ${console_ip}    ${console_port}    get_ip_port    ${type}
    ssh_login_capBed    ${tb_ip}
    sleep    2
    ${case_name}    set variable    VLANs
    ssh_execute_command    perl /root/capacityTB//scripts/vlan_multi_x1_RF.pl -fw ${host_ip} -sn 1 -en ${num}    ${time}    ${type}    ${case_name}

run_sdwan
    [Arguments]    ${pco_num}    ${interface_tunnel_num}    ${interface_WAN_num}
    ${half_tunnel_num}    evaluate    ${interface_tunnel_num}/2
    ${half_WAN_num}    evaluate    ${interface_WAN_num}/2
    ssh_login_capBed    ${tb_ip}
    ###add max class objects###
    ssh_execute_commands    perl /root/capacityTB/bin/capacityInit.pl -fw ${host_ip} -o sdwan-pco -n ${pco_num}    150
    SSHLibrary.write    \r
    ###add max grp, max path_select_profile###
    SSHLibrary.write    \\cp sdwan_path_select_profile_TI_full_Lowest_Latency.pl sdwan_path_select_profile.pl
    sleep    2
    SSHLibrary.write    \r
    ssh_execute_commands    perl /root/capacityTB/bin/capacityInit.pl -fw ${host_ip} -o sdwan-psp -n \ ${interface_tunnel_num}    200
    SSHLibrary.write    \r
    run keyword if    ${interface_WAN_num}!=0    run keywords    SSHLibrary.write    \\cp sdwan_path_select_profile_WAN_full_Lowest_Latency.pl sdwan_path_select_profile.pl
    ...    AND    sleep    2
    ...    AND    SSHLibrary.write    \r
    ...    AND    ssh_execute_commands    perl /root/capacityTB/bin/capacityInit.pl -fw ${host_ip} -o sdwan-psp -n \ \ ${interface_WAN_num}    120
    SSHLibrary.write    \\cp sdwan_path_select_profile1_TI_Lowest_Jitter.pl sdwan_path_select_profile.pl
    sleep    2
    SSHLibrary.write    \r
    ssh_execute_commands    perl /root/capacityTB/bin/capacityInit.pl -fw ${host_ip} -o sdwan-psp -n \ ${half_tunnel_num}    200
    SSHLibrary.write    \r
    SSHLibrary.write    \\cp sdwan_path_select_profile2_TI_classObj_1.pl sdwan_path_select_profile.pl
    sleep    2
    SSHLibrary.write    \r
    ssh_execute_commands    perl /root/capacityTB/bin/capacityInit.pl -fw ${host_ip} -o sdwan-psp -n \ ${half_tunnel_num}    220
    SSHLibrary.write    \r
    SSHLibrary.write    \\cp sdwan_path_select_profile3_TI_classObj_2.pl sdwan_path_select_profile.pl
    sleep    2
    SSHLibrary.write    \r
    ssh_execute_commands    perl /root/capacityTB/bin/capacityInit.pl -fw ${host_ip} -o sdwan-psp -n \ ${half_tunnel_num}    220
    SSHLibrary.write    \r
    run keyword if    ${interface_WAN_num}!=0    run keywords    SSHLibrary.write    \\cp sdwan_path_select_profile_1_Lowest_Jitter.pl sdwan_path_select_profile.pl
    ...    AND    sleep    2
    ...    AND    ssh_execute_commands    perl /root/capacityTB/bin/capacityInit.pl -fw ${host_ip} -o sdwan-psp -n \ ${half_WAN_num}    200
    ...    AND    SSHLibrary.write    \r
    ...    AND    SSHLibrary.write    \\cp sdwan_path_select_profile_2_classObj_1.pl sdwan_path_select_profile.pl
    ...    AND    sleep    2
    ...    AND    ssh_execute_commands    perl /root/capacityTB/bin/capacityInit.pl -fw ${host_ip} -o sdwan-psp -n \ ${half_WAN_num}    200
    ...    AND    SSHLibrary.write    \r
    ...    AND    SSHLibrary.write    \\cp sdwan_path_select_profile_3_classObj_2.pl sdwan_path_select_profile.pl
    ...    AND    sleep    2
    ...    AND    ssh_execute_commands    perl /root/capacityTB/bin/capacityInit.pl -fw ${host_ip} -o sdwan-psp -n \ ${half_WAN_num}    200
    ...    AND    SSHLibrary.write    \r
    SSHLibrary.write    \r
    ###add to max perf probe and max child perf probe###
    SSHLibrary.write    \\cp sdwan_perf_probe_WAN_x1gw.pl sdwan_perf_probe.pl
    sleep    2
    SSHLibrary.write    \r
    ssh_execute_commands    perl /root/capacityTB/bin/capacityInit.pl -fw ${host_ip} -o sdwan-pp -n \ ${half_WAN_num}    220
    SSHLibrary.close connection

get_delete_sdwan_values
    [Arguments]    ${type}
    ###获取盒子相关数据##
    login_by_https    192.168.168.168    admin    password    firefox
    Unselect Frame
    sleep    5
    Select Frame    name=toggleFrame
    sleep    10
    click element    xpath=//div//*[@id="toggleViewBtn"]
    sleep    30
    Unselect Frame
    ###sdwanGrp###
    Select Frame    id=outlookFrame
    Click element    xpath=//*[@href="sdwanGroupView.html"]
    sleep    10
    Unselect Frame
    Select Frame    id=tabFrame
    sleep    10
    ${returnvalue}    get element attribute    xpath=//*/span[4]/span    title
    log    ${returnvalue}
    ${current_sdwan_grp0}    evaluate    '${returnvalue}'.split(' ')[0]
    ${current_sdwan_grp}    trans_to_int    ${current_sdwan_grp0}
    log    actual_sdwan_grp:${current_sdwan_grp0}
    ${actual_sdwan_grp}    set variable    ${current_sdwan_grp}
    ${path}    ${name}    get_tsr_file    ${type}
    write_to_xlsFile    ${path}    ${name}.xlsx    2    34    ${current_sdwan_grp}
    Capture Page Screenshot
    Unselect Frame
    ###sdwanProbe###
    Select Frame    id=outlookFrame
    Click element    xpath=//*[@href="sdwanProbeView.html"]
    sleep    10
    Unselect Frame
    Select Frame    id=tabFrame
    sleep    10
    ${returnvalue0}    get element attribute    xpath=//*/span[4]/span    title
    log    ${returnvalue0}
    ${current_sdwan_pp0}    evaluate    '${returnvalue0}'.split(' ')[0]
    ${current_sdwan_pp}    trans_to_int    ${current_sdwan_pp0}
    log    current_sdwan_performance_probe:${current_sdwan_pp}
    ${actual_sdwan_pp}    set variable    ${current_sdwan_pp}
    write_to_xlsFile    ${path}    ${name}.xlsx    2    36    ${current_sdwan_pp}
    Capture Page Screenshot
    Unselect Frame
    ###sdwan PerfClassObj###
    Select Frame    id=outlookFrame
    Click element    xpath=//*[@href="perfClassObjView.html"]
    sleep    10
    Unselect Frame
    Select Frame    id=tabFrame
    sleep    10
    ${returnvalue1}    get element attribute    xpath=//*/span[3]/span    title
    log    ${returnvalue1}
    ${current_sdwan_pco0}    evaluate    '${returnvalue1}'.split(' ')[0]
    ${current_sdwan_pco}    trans_to_int    ${current_sdwan_pco0}
    log    current_sdwan_performance_class_objects:${current_sdwan_pco}
    ${actual_sdwan_pco}    set variable    ${current_sdwan_pco}
    write_to_xlsFile    ${path}    ${name}.xlsx    2    39    ${current_sdwan_pco}
    Capture Page Screenshot
    Unselect Frame
    ###sdwan Path selection profiles###
    Select Frame    id=outlookFrame
    Click element    xpath=//*[@href="pspView.html"]
    sleep    10
    Capture Page Screenshot
    Unselect Frame
    Select Frame    id=tabFrame
    sleep    10
    ${returnvalue2}    get element attribute    xpath=//*/span[4]/span    title
    log    ${returnvalue2}
    ${current_sdwan_psp0}    evaluate    '${returnvalue2}'.split(' ')[0]
    ${current_sdwan_psp}    trans_to_int    ${current_sdwan_psp0}
    log    current_sdwan_path_selection_profile:${current_sdwan_psp}
    ${actual_sdwan_psp}    set variable    ${current_sdwan_psp}
    write_to_xlsFile    ${path}    ${name}.xlsx    2    38    ${current_sdwan_psp}
    Capture Page Screenshot
    Unselect Frame
    sleep    10
    ###delete all###
    ###delete all sdwan Path selection profiles###
    sleep    20
    Select Frame    id=outlookFrame
    Click element    xpath=//*[@href="pspView.html"]
    sleep    10
    Unselect Frame
    Select Frame    id=tabFrame
    sleep    10
    Click element    xpath=//*[@class="toolbarAction swlDelAction actionWithDropdown"]
    sleep    3
    Click element    xpath=//li[@title="Delete all custom Path Selection Profiles"]
    sleep    10
    confirm action
    sleep    40
    ${returnvalue2}    get element attribute    xpath=//*/span[4]/span    title
    log    ${returnvalue2}
    ${current_sdwan_psp0}    evaluate    '${returnvalue2}'.split(' ')[0]
    ${current_sdwan_psp}    trans_to_int    ${current_sdwan_psp0}
    run keyword if    ${current_sdwan_psp}==0    log to console    Delete all sdwan path selection profiles successfully!!
    ...    ELSE    log to console    Failed to delete all sdwan path selection profiles! remain num[psp]=${current_sdwan_psp}
    Capture Page Screenshot
    Unselect Frame
    ###delete all tunnel interface sdwan Groups###
    sleep    20
    Select Frame    id=outlookFrame
    Click element    xpath=//*[@href="sdwanGroupView.html"]
    sleep    10
    Click element    xpath=//*[@href="sdwanGroupView.html"]
    sleep    10
    Unselect Frame
    Select Frame    id=tabFrame
    sleep    10
    Click element    xpath=//*[@class="toolbarAction swlDelAction actionWithDropdown"]
    sleep    3
    Click element    xpath=//li[@title="Delete all custom SD-WAN Groups"]
    sleep    10
    confirm action
    sleep    40
    Capture Page Screenshot
    Unselect Frame
    ###get and delete all virtual interface performance probes###
    sleep    20
    Select Frame    id=outlookFrame
    sleep    5
    Click element    xpath=//*[@href="sdwanProbeView.html"]
    sleep    10
    Unselect Frame
    Select Frame    id=tabFrame
    sleep    10
    Click element    xpath=//*[@class="toolbarAction swlDelAction actionWithDropdown"]
    sleep    3
    Click element    xpath=//li[@title="Delete all custom SD-WAN Performance Probes"]
    sleep    10
    confirm action
    sleep    40
    ${returnvalue0}    get element attribute    xpath=//*/span[4]/span    title
    log    ${returnvalue0}
    ${current_sdwan_pp0}    evaluate    '${returnvalue0}'.split(' ')[0]
    ${current_sdwan_pp}    trans_to_int    ${current_sdwan_pp0}
    log    current_sdwan_performance_probe:${current_sdwan_pp}
    run keyword if    ${current_sdwan_pp}==0    log to console    Delete all sdwan performance probes successfully!!
    ...    ELSE    log to console    Failed to delete all sdwan performance probes! remain num[sdwan-pp]=${current_sdwan_pp}
    Capture Page Screenshot
    Unselect Frame
    ###get and delete all virtual interface sdwan Groups###
    sleep    20
    Select Frame    id=outlookFrame
    Click element    xpath=//*[@href="sdwanGroupView.html"]
    sleep    10
    Click element    xpath=//*[@href="sdwanGroupView.html"]
    sleep    10
    Unselect Frame
    Select Frame    id=tabFrame
    sleep    10
    Click element    xpath=//*[@class="toolbarAction swlDelAction actionWithDropdown"]
    sleep    3
    Click element    xpath=//li[@title="Delete all custom SD-WAN Groups"]
    sleep    10
    confirm action
    sleep    60
    ${returnvalue}    get element attribute    xpath=//*/span[4]/span    title
    log    ${returnvalue}
    ${current_sdwan_grp0}    evaluate    '${returnvalue}'.split(' ')[0]
    ${current_sdwan_grp}    trans_to_int    ${current_sdwan_grp0}
    run keyword if    ${current_sdwan_grp}==0    log to console    Delete all sdwan groups successfully!!
    ...    ELSE    log to console    Failed to delete all sdwan groups! remain num[sdwan-g]=${current_sdwan_grp}
    Capture Page Screenshot
    Unselect Frame
    ###delete all sdwan performance class objects###
    sleep    20
    Select Frame    id=outlookFrame
    Click element    xpath=//*[@href="perfClassObjView.html"]
    sleep    10
    Unselect Frame
    Select Frame    id=tabFrame
    sleep    10
    Click element    xpath=//*[@class="toolbarAction swlDelAction actionWithDropdown"]
    sleep    3
    Click element    xpath=//li[@title="Delete all custom performance class objects"]
    sleep    10
    confirm action
    sleep    60
    ${returnvalue1}    get element attribute    xpath=//*/span[3]/span    title
    log    ${returnvalue1}
    ${current_sdwan_pco0}    evaluate    '${returnvalue1}'.split(' ')[0]
    ${current_sdwan_pco}    trans_to_int    ${current_sdwan_pco0}
    log to console    remain sdwan_pco=${current_sdwan_pco}
    run keyword if    ${current_sdwan_ppo}==3    log to console    Delete all sdwan performance class objects successfully!!
    ...    ELSE    log to console    Failed to delete all sdwan performance class objects! remain num[sdwan-pco]=${current_sdwan_pco}
    Capture Page Screenshot
    Unselect Frame
    [Teardown]    close browser
    [Return]    ${actual_sdwan_grp}    ${actual_sdwan_pp}    ${actual_sdwan_pco}    ${actual_sdwan_psp}

get_schedule_grp_depth
    [Arguments]    ${type}
    ###获取盒子相关数据##
    login_by_https    192.168.168.168    admin    password    firefox
    Unselect Frame
    sleep    5
    Select Frame    name=toggleFrame
    sleep    10
    click element    xpath=//div//*[@id="toggleViewBtn"]
    sleep    30
    Unselect Frame
    ###sdwanGrp###
    Select Frame    id=outlookFrame
    Click element    xpath=//*[@href="scheduleObjView.html"]
    sleep    10
    Unselect Frame
    Select Frame    id=tabFrame
    sleep    10
    ${text}    Get Text    xpath=//table[@class="swlDataTablePlain"]
    ${returnvalue}    get element attribute    xpath=//*/span[4]/span    title
    log    ${returnvalue}
    ${current_sdwan_grp0}    evaluate    '${returnvalue}'.split(' ')[0]
    ${current_sdwan_grp}    trans_to_int    ${current_sdwan_grp0}
    log    current_sdwan_grp:${current_sdwan_grp0}
    [Teardown]    close browser

GetTSRValues
    [Arguments]    ${type}
    ### 创建TSR表格###
    ${type}    set variable    ${type}
    ${path}    evaluate    '${type}'+'-Cap'+'-'+'${version}'
    ${folder}    evaluate    '${location}'+'/'+'${path}'
    ${csv_name}    set Variable    ${type}_${version}_TSR
    Create Soniccore TSR file    ${folder}    ${csv_name}.csv
    Comment    Create TSR file    ${folder}    ${csv_name}.csv
    ###获取TSR product数据###
    SSH-login-firewall    192.168.168.168
    Comment    Set Client Configuration    prompt=#
    SSHLibrary.write    show tech-support-report product
    sleep    3
    : FOR    ${i}    IN RANGE    6
    \    SSHLibrary.write bare    " "
    \    sleep    1
    ${tsr}    SSHLibrary.Read
    log    ${tsr}
    ${max_localUser}    get tsr value    ${tsr}    Max Local Users:\\s+(\\d+)
    ${max_sslVPN}    get tsr value    ${tsr}    max SSLVPN connections:\\s+(\\d+)
    ${max_userGrp}    get tsr value    ${tsr}    Max User Groups:\\s+(\\d+)
    ${max_userLogin}    get tsr value    ${tsr}    Max User Logins:\\s+(\\d+)
    ${max_restAPI_userLogin}    get tsr value    ${tsr}    Max Single Sign On Users:\\s+(\\d+)
    ${max_restAPI_Agents}    get tsr value    ${tsr}    Max SSO RADIUS Accounting clients:\\s+(\\d+)
    ${max_accessRules}    get tsr value    ${tsr}    Max Rules Per Table:\\s+(\\d+)
    ${max_addressobjPerGrp}    get tsr value    ${tsr}    Max Address Objects Per Group:\\s+(\\d+)
    ${max_serviceobjPerGrp}    get tsr value    ${tsr}    Max Service Objects Per Group:\\s+(\\d+)
    ${max_scheduleObj}    get tsr value    ${tsr}    Max Total User Schedule Objects:\\s+(\\d+)
    ${max_zones}    get tsr value    ${tsr}    Max Total Zone Objects:\\s+(\\d+)
    ${max_natPolicy}    get tsr value    ${tsr}    Max NAT Policies:\\s+(\\d+)
    ${max_vlan}    get tsr value    ${tsr}    Max virtual interfaces:\\s+(\\d+)
    ${max_routes}    get tsr value    ${tsr}    Max Static Routes:\\s+(\\d+)
    ${max_phase1}    get tsr value    ${tsr}    Max Phase1 SAs:\\s+(\\d+)
    ${max_phase2}    get tsr value    ${tsr}    Max Phase2 SAs:\\s+(\\d+)
    ${max_guestUser}    get tsr value    ${tsr}    Max Guest Users:\\s+(\\d+)
    ${max_app_p}    get tsr value    ${tsr}    Max App Firewall policies:\\s+(\\d+)
    ${max_app_o}    get tsr value    ${tsr}    Max App Firewall Application objs:\\s+(\\d+)
    ${max_app_a}    get tsr value    ${tsr}    Max App Firewall actions:\\s+(\\d+)
    ${max_app_e}    get tsr value    ${tsr}    Max App Firewall Email User objs:\\s+(\\d+)
    ${max_vpn_tunnel}    get tsr value    ${tsr}    max VPN tunnel interfaces allowed:\\s+(\\d+)
    ${max_vlan}    get tsr value    ${tsr}    Max virtual interfaces:\\s+(\\d+)
    ${max_dhcp}    get tsr value    ${tsr}    DHCPS Leases:\\s+(\\d+)
    ${max_dpiSSH}    set variable    0
    ${max_sp}    get tsr value    ${tsr}    maxSonicPointsPerInterface:\\s+(\\d+)
    ${max_sdwan_grp}    get tsr value    ${tsr}    SDWAN Max Groups:\\s+(\\d+)
    ${max_sdwan_Interface}    get tsr value    ${tsr}    SDWAN Max Total Interfaces:\\s+(\\d+)
    ${max_sdwan_pp}    get tsr value    ${tsr}    SDWAN Max Performance Probes:\\s+(\\d+)
    ${max_sdwan_cpp}    get tsr value    ${tsr}    SDWAN Max Child Performance Probes:\\s+(\\d+)
    ${max_sdwan_psp}    get tsr value    ${tsr}    SDWAN Max Path Selection Profiles:\\s+(\\d+)
    ${max_sdwan_pco}    get tsr value    ${tsr}    SDWAN Max Performance Class Objects:(\\d+)
    ${max_schedule_depth}    get tsr value    ${tsr}    Max Schedule Object Group Nesting:\\s+(\\d+)
    ${max_bmr}    get tsr value    ${tsr}    Max Bwmgmt Rules:\\s+(\\d+)
    ${max_dynamicRoute}    get tsr value    ${tsr}    Max Dynamic Routes:\\s+(\\d+)
    ${max_AppFirewallEmailConnections}    get tsr value    ${tsr}    Max App Firewall Email connections:\\s+(\\d+)
    SSHLibrary.write    \r
    ###获取AO TSR###
    SSHLibrary.write    show tech-support-report address-objects
    sleep    2
    ${tsr_a}    SSHLibrary.read
    ${max_ao}    get tsr value    ${tsr_a}    Max objects:\\s+(\\d+)
    ${max_ag}    get tsr value    ${tsr_a}    Max groups:\\s+(\\d+)
    ${max_agd}    get tsr value    ${tsr_a}    Max group depth:\\s+(\\d+)
    SSHLibrary.Write Bare    q
    SSHLibrary.write    \r
    sleep    2
    ###获取SO TSR###
    SSHLibrary.write    show tech-support-report service-objects
    sleep    3
    SSHLibrary.write    show tech-support-report service-objects
    sleep    2
    ${tsr_s}    SSHLibrary.read
    ${max_so}    get tsr value    ${tsr_s}    Max objects:\\s+(\\d+)
    ${max_sg}    get tsr value    ${tsr_s}    Max groups:\\s+(\\d+)
    ${max_sgd}    get tsr value    ${tsr_s}    Max group depth:\\s+(\\d+)
    Comment    ${max_so}    set Variable    2101
    Comment    ${max_sg}    set Variable    850
    Comment    ${max_sgd}    set Variable    200
    SSHLibrary.Write Bare    q
    SSHLibrary.write    \r
    sleep    2
    ###固定值###
    ${max_arp}    set Variable    300
    ${max_botnetFilters}    set Variable    512
    ${max_geoIPFilters}    set Variable    512
    ${max_dynamic-ao}    set Variable    256
    ###S2S 和 Group VPN###
    ${max_s2s}    ${max_grpVpn}    get_site2site_and_groupVPN_target
    ###将TSR获取的值写入CSV表格###
    Comment    write to csvFile    ${folder}    ${csv_name}    ${max_ao}    ${max_ag}    ${max_agd}
    ...    ${max_addressobjPerGrp}    ${max_so}    ${max_sg}    ${max_sgd}    ${max_serviceobjPerGrp}    ${max_natPolicy}
    ...    ${max_vlan}    ${max_zones}    ${max_localUser}    ${max_userGrp}    ${max_userLogin}    ${max_guestUser}
    ...    ${max_accessRules}    ${max_dhcp}    ${max_sp}    ${max_s2s}    ${max_grpVpn}    ${max_routes}
    ...    ${max_vpn_tunnel}    ${max_arp}    ${max_scheduleObj}    ${max_app_p}    ${max_app_o}    ${max_app_a}
    ...    ${max_app_e}    ${max_phase1}    ${max_phase2}    ${max_sslVPN}    ${max_botnetFilters}    ${max_geoIPFilters}
    ...    ${max_routes}    ${max_restAPI_Agents}    ${max_restAPI_userLogin}    ${max_dpiSSH}    ${max_dynamic-ao}
    write to csvFile    ${folder}    ${csv_name}    ${max_ao}    ${max_ag}    ${max_agd}    ${max_addressobjPerGrp}
    ...    ${max_so}    ${max_sg}    ${max_sgd}    ${max_serviceobjPerGrp}    ${max_natPolicy}    ${max_vlan}
    ...    ${max_zones}    ${max_localUser}    ${max_userGrp}    ${max_userLogin}    ${max_guestUser}    ${max_accessRules}
    ...    ${max_dhcp}    ${max_sp}    ${max_s2s}    ${max_grpVpn}    ${max_routes}    ${max_vpn_tunnel}
    ...    ${max_arp}    ${max_scheduleObj}    ${max_app_p}    ${max_app_o}    ${max_app_a}    ${max_app_e}
    ...    ${max_phase1}    ${max_phase2}    ${max_sslVPN}    ${max_botnetFilters}    ${max_geoIPFilters}    ${max_routes}
    ...    ${max_sdwan_grp}    ${max_sdwan_Interface}    ${max_sdwan_pp}    ${max_sdwan_cpp}    ${max_sdwan_psp}    ${max_sdwan_pco}
    ...    ${max_schedule_depth}    ${max_bmr}    ${max_dynamicRoute}    ${max_AppFirewallEmailConnections}
    csv to xlsx    ${folder}    ${csv_name}
    log to console    Get TSR successfully!

exportOrigConf
    [Arguments]    ${type}
    export log    ${type}    orig

CreateTargetCSV
    [Arguments]    ${type}
    ##copy product matrix to the related folder##
    ${desPath}    evaluate    '${type}'+'-Cap'+'-'+'${version}'
    ${desFolder}    evaluate    '${location}'+'/'+'${desPath}'
    ${sourceFile}    evaluate    '${productMatrix_path}'+'/'+'${type}_productMatrix.csv'
    ${desFile}    evaluate    '${desFolder}'+'/'+'${type}_${version}_TSR.csv'
    copyfile    ${sourceFile}    ${desFile}
    ##convert csv file to xlsx file##
    csv to xlsx    ${desFolder}    ${type}_${version}_TSR
    log to console    Get product matrix successfully!

deregister_from_web
    ${result}    ${returnvalue}    Run Keyword And Ignore Error    deregister
    sleep    3
    : FOR    ${i}    IN RANGE    3
    \    sleep    5
    \    EXIT for loop if    '${result}' == 'PASS'
    \    ${result}    ${returnvalue}    Run Keyword And Ignore Error    deregister
    Run Keyword IF    '${result}' == 'FAIL'    FAIL    Firewall deregister failed!!
    ...    ELSE    sleep    100

loadCaseConf
    [Arguments]    ${type}    ${case_name}
    login_by_https    192.168.168.168    admin    password    firefox
    Unselect Frame
    sleep    12
    Unselect Frame
    Select Frame    id=outlookFrame
    Click element    xpath=//*[@href="systemStatusView.html"]
    sleep    2
    Click element    xpath=//*[@href="dynCloudBackupSettings.html"]
    sleep    2
    Unselect Frame
    Select Frame    id=tabFrame
    execute javascript    window.ieDropdown()
    sleep    2
    click element    xpath=//div[@id="impDropdown"]/a[1]
    sleep    2
    execute javascript    window.onClickProceedToImport()
    sleep    2
    ${foldername0}    set variable    ${type}-Cap-${version}
    ${foldername}    set variable    ${type}-${version}-${case_name}-Log
    ${path0}    set variable    E:\\RF-Capacity_CapBed - VMware-NGPE\\report\\${foldername0}\\${foldername}\\
    ${exp_name}    set variable    ${type}-${case_name}.exp
    ${path}    set variable    ${path0}${exp_name}
    choose file    id=importFile    ${path}
    sleep    2
    click element    xpath=//button[@type="submit"]
    sleep    300
    log to console    Finished load conf!
    [Teardown]    close browser
